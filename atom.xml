<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangyin1.github.io</id>
    <title>tangyin</title>
    <updated>2023-10-18T07:00:41.404Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tangyin1.github.io"/>
    <link rel="self" href="https://tangyin1.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tangyin1.github.io/images/avatar.png</logo>
    <icon>https://tangyin1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, tangyin</rights>
    <entry>
        <title type="html"><![CDATA[线程池的一些相关知识]]></title>
        <id>https://tangyin1.github.io/post/xian-cheng-chi-de-yi-xie-xiang-guan-zhi-shi/</id>
        <link href="https://tangyin1.github.io/post/xian-cheng-chi-de-yi-xie-xiang-guan-zhi-shi/">
        </link>
        <updated>2023-10-18T06:48:02.000Z</updated>
        <summary type="html"><![CDATA[<p>😀😀😀最近在b站上刷到一个关于线程池的课程，以前学os的时候也没认真学习相关代码知识，只是了解一下理论知识，知道一些阻塞，竞争，时间片轮转等等一些，以下是相关视频下面记得笔记。<br>
（不过存在一些问题还没有解决，在手写一个线程池的那里，没有正确写出，编译正常，但运行时会阻塞卡住，以后学习之后再来解决）😀😀😀</p>
]]></summary>
        <content type="html"><![CDATA[<p>😀😀😀最近在b站上刷到一个关于线程池的课程，以前学os的时候也没认真学习相关代码知识，只是了解一下理论知识，知道一些阻塞，竞争，时间片轮转等等一些，以下是相关视频下面记得笔记。<br>
（不过存在一些问题还没有解决，在手写一个线程池的那里，没有正确写出，编译正常，但运行时会阻塞卡住，以后学习之后再来解决）😀😀😀</p>
<!-- more -->
<h3 id="进程的概念">进程的概念</h3>
<p>进程就是运行中的程序</p>
<ul>
<li>
<p>线程就是进程中的进程</p>
</li>
<li>
<p>线程的最大数量取决于CPU的核心数，最大线程数并不等于cpu核数，一个核可以多线程</p>
</li>
</ul>
<h3 id="join">join()</h3>
<ol>
<li>
<p>主程序等待线程执行完毕：join()</p>
</li>
<li>
<p>分离线程：detach()</p>
</li>
<li>
<p>joinable():判断进程是否可以使用join函数，可以则返回true，否则返回false</p>
</li>
</ol>
<p>​    可能会出现阻塞状态，然后join会使子线程执行完毕，主线程才会执行</p>
<p>std：：ref  传递引用类型</p>
<h3 id="互斥量解决多线程数据共享问题">互斥量解决多线程数据共享问题</h3>
<ul>
<li>
<p>通过加锁解锁的方式来解决</p>
</li>
<li>
<p>在mutex头文件中</p>
</li>
<li>
<p><font color='red'>lock()加锁</font></p>
</li>
<li>
<p><font color='red'>unlock()解锁 </font></p>
</li>
</ul>
<p><strong>如果多线程程序每一次运行的结果和单线程运行的结果始终是<font color='red'>一样的</font>，那么你的线程就是<font color='red'>安全的</font></strong></p>
<h3 id="lock_guard-与unique_lock">lock_guard 与unique_lock</h3>
<p>lock_guard：互斥量封装类，用于<font color='red'>保护共享数据</font>，防止多个线程同时访问同一资源而导致的数据竞争问题</p>
<p>特点：</p>
<p>当析构函数被调用时，该互斥量会自动解锁</p>
<p>对象不能复制或者移动，因此它只能在局部作用域中使用</p>
<h3 id="stdunique_lock"><strong>std::unique_lock</strong></h3>
<p><code>std::unique_lock</code> 是 C++ 标准库中提供的一个互斥量封装类，用于在多线程程序中对互斥量进行加锁和解锁操作。它的主要特点是可以对互斥量进行更加灵活的管理，包括延迟加锁、条件变量、超时等。<font color='red'>在实际开发过程中使用的很频繁</font></p>
<p><code>std::unique_lock</code> 提供了以下几个成员函数：</p>
<ul>
<li>
<p><code>lock()</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁。</p>
</li>
<li>
<p><code>try_lock()</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则函数立即返回 <code>false</code>，否则返回 <code>true</code>。</p>
</li>
<li>
<p><code>try_lock_for(const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time)</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁，或者超过了指定的时间。</p>
</li>
<li>
<p><code>try_lock_until(const std::chrono::time_point&lt;Clock, Duration&gt;&amp; abs_time)</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁，或者超过了指定的时间点。</p>
</li>
<li>
<p><code>unlock()</code>：对互斥量进行解锁操作。</p>
</li>
</ul>
<p>除了上述成员函数外，<code>std::unique_lock</code> 还提供了以下几个构造函数：</p>
<ul>
<li><code>unique_lock() noexcept = default</code>：默认构造函数，创建一个未关联任何互斥量的 <code>std::unique_lock</code> 对象。</li>
<li><code>explicit unique_lock(mutex_type&amp; m)</code>：构造函数，使用给定的互斥量 <code>m</code> 进行初始化，并对该互斥量进行加锁操作。</li>
<li><code>unique_lock(mutex_type&amp; m, defer_lock_t) noexcept</code>：构造函数，使用给定的互斥量 <code>m</code> 进行初始化，但不对该互斥量进行加锁操作。</li>
<li><code>unique_lock(mutex_type&amp; m, try_to_lock_t) noexcept</code>：构造函数，使用给定的互斥量 <code>m</code> 进行初始化，并尝试对该互斥量进行加锁操作。如果加锁失败，则创建的 <code>std::unique_lock</code> 对象不与任何互斥量关联。</li>
<li><code>unique_lock(mutex_type&amp; m, adopt_lock_t) noexcept</code>：构造函数，使用给定的互斥量 <code>m</code> 进行初始化，并假设该互斥量已经被当前线程成功加锁。</li>
</ul>
<h3 id="call_once与其使用场景">call_once与其使用场景</h3>
<p>单例设计模式是一种常见的设计模式，用于确保某个类只能创建一个实例。由于单例实例是全局唯一的，因此在多线程环境中使用单例模式时，需要考虑线程安全的问题</p>
<p>懒汉模式、饿汉模式</p>
<h3 id="异步并发">异步并发</h3>
<ul>
<li>
<p>async、future</p>
<p>是C++11引入的一个函数模板，用于异步执行一个函数，并返回一个std::future对象，表示异步操作的结果。使用std::async可以方便地进行异步编程，<font color='red'>避免了手动创建线程和管理线程的麻烦。</font></p>
</li>
<li>
<p>packaged</p>
<p>在C++中，packaged_task是一个类模板，用于将一个可调用对象（如函数、函数对象或Lambda表达式）封装成一个异步操作，并返回一个std::future对象，表示异步操作的结果。packaged_task可以方便地将一个函数或可调用对象转换成一个异步操作，供其他线程使用。</p>
</li>
</ul>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;future&gt;
using namespace std;

int func()
{
	int a = 0;
	for (int i=0; i &lt; 1000; i++)
	{
		a++;

	}
	return a;

}

int main()
{
	//future&lt;int&gt; result = async(launch::async, func);
	packaged_task&lt;int()&gt;task(func);
	auto result = task.get_future();
	thread t1(move(task));
	cout &lt;&lt; func() &lt;&lt; endl;
	t1.join();
	cout &lt;&lt; result.get() &lt;&lt; endl;//需要get拿到a，否则会报错，类似进程中数据竞争问题
	return 0;
}
</code></pre>
<ul>
<li>
<p><font color='red'>promise</font></p>
<p>在C++中，promise是一个类模板，用于在一个线程中产生一个值，并在另一个线程中获取这个值。promise通常与future和async一起使用，用于实现异步编程。可以在主线程中拿到子线程生成的值。</p>
</li>
</ul>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;future&gt;
using namespace std;
void func(promise&lt;int&gt;&amp;f)
{
	f.set_value(100);
}
int main()
{
	promise&lt;int&gt;f;
	auto fu= f.get_future();
	thread t1(func, ref(f));
	t1.join();
	cout &lt;&lt; fu.get() &lt;&lt; endl;

	return 0;

}




</code></pre>
<h3 id="原子变量">原子变量</h3>
<h4 id="atomic">atomic：</h4>
<p>是 C++11 标准库中的一个模板类，用于实现多线程环境下的原子操作。它提供了一种线程安全的方式来访问和修改共享变量，可以避免多线程环境中的数据竞争问题。原子加锁比自己去手动加锁解锁的效率是更高的。</p>
<p>以下是一些常用的 <code>std::atomic</code> 操作：</p>
<ol>
<li>
<p><code>load()</code>：将 <code>std::atomic</code> 变量的值加载到当前线程的本地缓存中，并返回这个值。</p>
</li>
<li>
<p><code>store(val)</code>：将 <code>val</code> 的值存储到 <code>std::atomic</code> 变量中，并保证这个操作是原子性的。</p>
</li>
<li>
<p><code>exchange(val)</code>：将 <code>val</code> 的值存储到 <code>std::atomic</code> 变量中，并返回原先的值。</p>
</li>
<li>
<p><code>compare_exchange_weak(expected, val)</code> 和 <code>compare_exchange_strong(expected, val)</code>：比较 <code>std::atomic</code> 变量的值和 <code>expected</code> 的值是否相同，如果相同，则将 <code>val</code> 的值存储到 <code>std::atomic</code> 变量中，并返回 <code>true</code>；否则，将 <code>std::atomic</code> 变量的值存储到 <code>expected</code> 中，并返回 <code>false</code>。</p>
</li>
</ol>
<p>以下是那个线程池的代码：</p>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;thread&gt;
#include&lt;mutex&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;condition_variable&gt;
#include&lt;functional&gt;
class ThreadPool {
public:
	ThreadPool(int numThreads ):stop (false)
	{
		for (int i = 0; i &lt; numThreads; i++)
		{
			threads.emplace_back([this]
				{
					while (1)
					{
						std::unique_lock&lt;std::mutex&gt; lock(mtx);
						condition.wait(lock, [this] {
							return stop || !tasks.empty();
							});
						if (stop &amp;&amp; tasks.empty())
						{
							return;
						}
						std::function&lt;void()&gt;task(std::move(tasks.front()));
						tasks.pop();
						lock.unlock();
						task();
					}
				});
		}

	}

	~ThreadPool()
	{
		std::unique_lock&lt;std::mutex&gt; lock(mtx);
		stop = true;
		condition.notify_all();
		for(auto &amp;t:threads)
		{
			t.join();
		}
	}
	template&lt;class F, class... Args&gt;
	void enqueau(F &amp;&amp; f,Args&amp;&amp;... args)//万能引用
	{
		std::function&lt;void()&gt;task=
			std::bind(std::forward&lt;F&gt;(f),
			std::forward&lt;Args&gt;(args)...);//完美转换
		
		{
			std::unique_lock&lt;std::mutex&gt; lock(mtx);
			tasks.emplace(std::move(task));
		}
		condition.notify_one();
	}
	
private:
	std::vector&lt;std::thread&gt; threads;
	std::queue&lt;std::function &lt;void()&gt;&gt; tasks;
	std::mutex mtx;
	std::condition_variable condition;
	bool stop;
};

int main()
{
	ThreadPool pool(2);

	for(int i=0;i&lt;4;i++)
	{ 
		pool.enqueau([i] {
			std::cout &lt;&lt; &quot;task : &quot; &lt;&lt; i &lt;&lt; &quot;is running&quot;  &lt;&lt; std::endl;
			std::this_thread::sleep_for(std::chrono::seconds(1));
			std::cout &lt;&lt; &quot;task : &quot; &lt;&lt; i &lt;&lt; &quot;is down&quot; &lt;&lt; std::endl;
			});
		
	}
	return 0;

}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Docker的一些基础普及]]></title>
        <id>https://tangyin1.github.io/post/guan-yu-docker-de-yi-xie-ji-chu-pu-ji/</id>
        <link href="https://tangyin1.github.io/post/guan-yu-docker-de-yi-xie-ji-chu-pu-ji/">
        </link>
        <updated>2023-09-16T13:05:40.000Z</updated>
        <summary type="html"><![CDATA[<p>😜😜😜最近在b站上刷到一个关于Docker的知识，然后自己又找了一下相关的资料进行补充，算是一种科普吧。😜😜😜</p>
]]></summary>
        <content type="html"><![CDATA[<p>😜😜😜最近在b站上刷到一个关于Docker的知识，然后自己又找了一下相关的资料进行补充，算是一种科普吧。😜😜😜</p>
<!-- more -->
<h1 id="1-什么是docker">1 什么是Docker</h1>
<p>docker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器，docker将程序以及程序所有的依赖都打包到docker container，这样你的程序可以在任何环境都会有一致的表现，这里程序运行的依赖也就是容器就好比集装箱，容器所处的操作系统环境就好比货船或港口，程序的表现只和集装箱有关系(容器)，和集装箱放在哪个货船或者哪个港口(操作系统)没有关系。</p>
<p>因此我们可以看到docker可以屏蔽环境差异，也就是说，只要你的程序打包到了docker中，那么无论运行在什么环境下程序的行为都是一致的。<br>
此外docker的另一个好处就是快速部署，这是当前互联网公司最常见的一个应用场景，一个原因在于容器启动速度非常快，另一个原因在于只要确保一个容器中的程序正确运行，那么你就能确信无论在生产环境部署多少都能正确运行。</p>
<h1 id="2-docker和虚拟机的区别">2 Docker和虚拟机的区别</h1>
<p>Docker直接用的是物理机的os及物理资源、虚拟机需要加上一层hupervisor层 ，比虚拟机轻量化很多，列如你现在去下载一个centos的系统镜像，虚拟机的镜像大概需要3-4G，但docker的镜像大概只有300Mb左右，而且相比于虚拟机消耗的资源更少，可以看作一个小型的Linux的沙盒环境来使用。</p>
<h1 id="3-docker的工作原理">3、Docker的工作原理：</h1>
<p>Docker是一个开源的容器化平台，它通过利用操作系统级虚拟化技术，将应用程序以及其依赖项打包成一个独立的容器。Docker使用Linux内核中的容器技术（如像命名空间和控制组）来实现轻量级隔离，并提供了一个统一的接口和工具集，使得容器的创建、部署和管理变得简单和高效。</p>
<h1 id="4-docker镜像">4、Docker镜像：</h1>
<p>Docker镜像是Docker中的核心概念，它是一个只读的模板，包含了用于创建容器的文件系统。镜像可以包含操作系统、库、应用程序和其它依赖项。镜像是通过层（Layer）的概念构建的，每一层都是对上一层的增量修改。这种分层的结构使得镜像的构建和发布非常高效，并且可以共享和重复使用。</p>
<h1 id="5-docker容器">5、Docker容器：</h1>
<p>Docker容器是从镜像创建的运行实例。容器是独立、可移植且可隔离的，可以在任何支持Docker的环境中运行。每个容器都有自己的文件系统、网络和进程空间。容器使用镜像作为基础，启动时会在镜像的上一层创建一个可写的容器层。容器可以启动、停止、删除和暂停，使得应用程序的交付和管理非常灵活。</p>
<h1 id="6-容器创建的方式">6、容器创建的方式：</h1>
<p>在Docker中，有多种方式可以创建容器：</p>
<ul>
<li>使用Dockerfile：Dockerfile是一个文本文件，其中包含了一系列的指令，用于描述如何构建镜像。通过Dockerfile，可以自动化构建和配置镜像，并在此基础上创建容器。</li>
<li>从现有容器创建：可以基于一个已有的容器创建新的容器。这种方式是通过复制现有容器的文件系统和状态来实现的，可以在原有容器的基础上进行修改和扩展。</li>
<li>使用Docker镜像仓库：Docker镜像仓库（如Docker Hub）提供了许多已经创建好的镜像，可以直接从仓库中下载并创建容器。</li>
</ul>
<h1 id="7-容器创建命令详解">7、容器创建命令详解：</h1>
<p>要创建容器，可以使用<code>docker run</code>命令。以下是常用的参数和选项：</p>
<ul>
<li><code>-d</code>：后台运行容器。</li>
<li><code>-p</code>：将容器的端口映射到宿主机的端口。</li>
<li><code>-v</code>：将宿主机的目录挂载到容器中，实现数据共享。</li>
<li><code>--name</code>：指定容器的名称。</li>
<li><code>-e</code>：配置容器的环境变量。</li>
<li><code>--rm</code>：容器停止后自动删除。</li>
<li><code>--network</code>：指定容器所属的网络。</li>
<li><code>--link</code>：连接多个容器。</li>
<li><code>-it</code>：以交互模式启动容器。</li>
</ul>
<p>综上所述，Docker是一个强大的容器化平台，通过镜像和容器的概念，实现了应用程序的轻量级隔离和高效部署。使用Docker，开发者可以更快速地开发、交付和运行应用程序，并方便地进行扩展和管理。</p>
<h2 id="最后附上一些相关资料">最后附上一些相关资料</h2>
<p>bilibili 相关资料视频介绍：<a href="https://b23.tv/beMRblG">Docker详解，7分钟学会-哔哩哔哩</a><br>
知乎高赞文章介绍：<a href="https://zhuanlan.zhihu.com/p/187505981">什么是Dockers</a><br>
<a href="https://docs.docker.com/engine/install">docker安装官方说明</a><br>
<a href="https://hub.docker.com">dockerHub镜像仓库</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++入门项目（一）]]></title>
        <id>https://tangyin1.github.io/post/cru-men-xiang-mu-yi/</id>
        <link href="https://tangyin1.github.io/post/cru-men-xiang-mu-yi/">
        </link>
        <updated>2023-09-09T12:41:38.000Z</updated>
        <summary type="html"><![CDATA[<p>🍏🍏🍏C++入门项目，关于在linux下搭建的一个轻量化服务器🍏🍏🍏</p>
]]></summary>
        <content type="html"><![CDATA[<p>🍏🍏🍏C++入门项目，关于在linux下搭建的一个轻量化服务器🍏🍏🍏</p>
<!-- more -->
<h1 id="tinywebservera">TinyWebServera</h1>
<p>简介：Linux下C++轻量级Web服务器，助力初学者快速实践网络编程，搭建属于自己的服务器.<br>
项目地址：<br>
https://github.com/qinguoyi/TinyWebServer</p>
<p>准备环境：Linux操纵系统、MySQL数据库，一个浏览器，火狐，谷歌，egde等都可以。</p>
<p>预备知识：通读一遍《Linux高性能服务器编程》— 游双著<br>
书籍下载地址：https://github.com/GreenGitHuber/eBook/blob/master/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.pdf</p>
<h2 id="1-什么是web-server网络服务器">1.  什么是Web Server（网络服务器）</h2>
<p>一个Web Server就是一个服务器软件（程序），或者是运行这个服务器软件的硬件（计算机）。其主要功能是通过HTTP协议与客户端（通常是浏览器（Browser））进行通信，来接收，存储，处理来自客户端的HTTP请求，并对其请求做出HTTP响应，返回给客户端其请求的内容（文件、网页等）或返回一个Error信息。</p>
<figure data-type="image" tabindex="1"><img src="https://tangyin1.github.io/post-images/1694487850838.svg" alt="" loading="lazy"></figure>
<h2 id="2-用户如何与你的web服务器进行通信">2. 用户如何与你的Web服务器进行通信</h2>
<p>通常用户使用Web浏览器与相应服务器进行通信。在浏览器中键入“域名”或“IP地址:端口号”，浏览器则先将你的域名解析成相应的IP地址或者直接根据你的IP地址向对应的Web服务器发送一个HTTP请求。这一过程首先要通过TCP协议的三次握手建立与目标Web服务器的连接，然后HTTP协议生成针对目标Web服务器的HTTP请求报文，通过TCP、IP等协议发送到目标Web服务器上。</p>
<h2 id="3-web服务器如何接收客户端发来的http请求报文呢">3. Web服务器如何接收客户端发来的HTTP请求报文呢?</h2>
<p>Web服务器端通过socket监听来自用户的请求。</p>
<pre><code class="language-C++">#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
/* 创建监听socket文件描述符 */
int listenfd = socket(PF_INET, SOCK_STREAM, 0);
/* 创建监听socket的TCP/IP的IPV4 socket地址 */
struct sockaddr_in address;
bzero(&amp;address, sizeof(address));
address.sin_family = AF_INET;
address.sin_addr.s_addr = htonl(INADDR_ANY);  /* INADDR_ANY：将套接字绑定到所有可用的接口 */
address.sin_port = htons(port);
int flag = 1;
/* SO_REUSEADDR 允许端口被重复使用 */
setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;flag, sizeof(flag));
/* 绑定socket和它的地址 */
ret = bind(listenfd, (struct sockaddr*)&amp;address, sizeof(address));  
/* 创建监听队列以存放待处理的客户连接，在这些客户连接被accept()之前 */
ret = listen(listenfd, 5);
</code></pre>
<p>远端的很多用户会尝试去connect()这个Web Server上正在listen的这个port，而监听到的这些连接会排队等待被accept()。由于用户连接请求是随机到达的异步事件，每当监听socket（listenfd）listen到新的客户连接并且放入监听队列，我们都需要告诉我们的Web服务器有连接来了，accept这个连接，并分配一个逻辑单元来处理这个用户请求。而且，我们在处理这个请求的同时，还需要继续监听其他客户的请求并分配其另一逻辑单元来处理（并发，同时处理多个事件，后面会提到使用线程池实现并发）。这里，服务器通过epoll这种I/O复用技术（还有select和poll）来实现对监听socket（listenfd）和连接socket（客户请求）的同时监听。注意I/O复用虽然可以同时监听多个文件描述符，但是它本身是阻塞的，并且当有多个文件描述符同时就绪的时候，如果不采取额外措施，程序则只能按顺序处理其中就绪的每一个文件描述符，所以为提高效率，我们将在这部分通过线程池来实现并发（多线程并发），为每个就绪的文件描述符分配一个逻辑单元（线程）来处理。</p>
<pre><code class="language-C++">#include &lt;sys/epoll.h&gt;
/* 将fd上的EPOLLIN和EPOLLET事件注册到epollfd指示的epoll内核事件中 */
void addfd(int epollfd, int fd, bool one_shot) {
    epoll_event event;
    event.data.fd = fd;
    event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;
    /* 针对connfd，开启EPOLLONESHOT，因为我们希望每个socket在任意时刻都只被一个线程处理 */
    if(one_shot)
        event.events |= EPOLLONESHOT;
    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event);
    setnonblocking(fd);
}
/* 创建一个额外的文件描述符来唯一标识内核中的epoll事件表 */
int epollfd = epoll_create(5);  
/* 用于存储epoll事件表中就绪事件的event数组 */
epoll_event events[MAX_EVENT_NUMBER];  
/* 主线程往epoll内核事件表中注册监听socket事件，当listen到新的客户连接时，listenfd变为就绪事件 */
addfd(epollfd, listenfd, false);  
/* 主线程调用epoll_wait等待一组文件描述符上的事件，并将当前所有就绪的epoll_event复制到events数组中 */
int number = epoll_wait(epollfd, events, MAX_EVENT_NUMBER, -1);
/* 然后我们遍历这一数组以处理这些已经就绪的事件 */
for(int i = 0; i &lt; number; ++i) {
    int sockfd = events[i].data.fd;  // 事件表中就绪的socket文件描述符
    if(sockfd == listenfd) {  // 当listen到新的用户连接，listenfd上则产生就绪事件
        struct sockaddr_in client_address;
        socklen_t client_addrlength = sizeof(client_address);
        /* ET模式 */
        while(1) {
            /* accept()返回一个新的socket文件描述符用于send()和recv() */
            int connfd = accept(listenfd, (struct sockaddr *) &amp;client_address, &amp;client_addrlength);
            /* 并将connfd注册到内核事件表中 */
            users[connfd].init(connfd, client_address);
            /* ... */
        }
    }
    else if(events[i].events &amp; (EPOLLRDHUP | EPOLLHUP | EPOLLERR)) {
        // 如有异常，则直接关闭客户连接，并删除该用户的timer
        /* ... */
    }
    else if(events[i].events &amp; EPOLLIN) {
        /* 当这一sockfd上有可读事件时，epoll_wait通知主线程。*/
        if(users[sockfd].read()) { /* 主线程从这一sockfd循环读取数据, 直到没有更多数据可读 */
            pool-&gt;append(users + sockfd);  /* 然后将读取到的数据封装成一个请求对象并插入请求队列 */
            /* ... */
        }
        else
            /* ... */
    }
    else if(events[i].events &amp; EPOLLOUT) {
        /* 当这一sockfd上有可写事件时，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果 */
        if(users[sockfd].write()) {
            /* ... */
        }
        else
            /* ... */
    }
}
</code></pre>
<p>服务器程序通常需要处理三类事件：I/O事件，信号及定时事件。有两种事件处理模式：</p>
<p>Reactor模式：要求主线程（I/O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程（逻辑单元），将socket可读可写事件放入请求队列，交给工作线程处理。<br>
Proactor模式：将所有的I/O操作都交给主线程和内核来处理（进行读、写），工作线程仅负责处理逻辑，如主线程读完成后users[sockfd].read()，选择一个工作线程来处理客户请求pool-&gt;append(users + sockfd)。<br>
通常使用同步I/O模型（如epoll_wait）实现Reactor，使用异步I/O（如aio_read和aio_write）实现Proactor。但在此项目中，我们使用的是同步I/O模拟的Proactor事件处理模式。那么什么是同步I/O，什么是异步I/O呢？<br>
廖雪峰：异步IO一节给出解释:</p>
<p>同步（阻塞）I/O：在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。<br>
异步（非阻塞）I/O：当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。<br>
Linux下有三种IO复用方式：epoll，select和poll，为什么用epoll，它和其他两个有什么区别呢？（参考StackOverflow上的一个问题：Why is epoll faster than select?）</p>
<p>对于select和poll来说，所有文件描述符都是在用户态被加入其文件描述符集合的，每次调用都需要将整个集合拷贝到内核态；epoll则将整个文件描述符集合维护在内核态，每次添加文件描述符的时候都需要执行一个系统调用。系统调用的开销是很大的，而且在有很多短期活跃连接的情况下，epoll可能会慢于select和poll由于这些大量的系统调用开销。<br>
select使用线性表描述文件描述符集合，文件描述符有上限；poll使用链表来描述；epoll底层通过红黑树来描述，并且维护一个ready list，将事件表中已经就绪的事件添加到这里，在使用epoll_wait调用时，仅观察这个list中有没有数据即可。<br>
select和poll的最大开销来自内核判断是否有文件描述符就绪这一过程：每次执行select或poll调用时，它们会采用遍历的方式，遍历整个文件描述符集合去判断各个文件描述符是否有活动；epoll则不需要去以这种方式检查，当有活动产生时，会自动触发epoll回调函数通知epoll文件描述符，然后内核将这些就绪的文件描述符放到之前提到的ready list中等待epoll_wait调用后被处理。<br>
select和poll都只能工作在相对低效的LT模式下，而epoll同时支持LT和ET模式。<br>
综上，当监测的fd数量较小，且各个fd都很活跃的情况下，建议使用select和poll；当监听的fd数量较多，且单位时间仅部分fd活跃的情况下，使用epoll会明显提升性能。<br>
Epoll对文件操作符的操作有两种模式：LT（电平触发）和ET（边缘触发），二者的区别在于当你调用epoll_wait的时候内核里面发生了什么：</p>
<p>LT（电平触发）：类似select，LT会去遍历在epoll事件表中每个文件描述符，来观察是否有我们感兴趣的事件发生，如果有（触发了该文件描述符上的回调函数），epoll_wait就会以非阻塞的方式返回。若该epoll事件没有被处理完（没有返回EWOULDBLOCK），该事件还会被后续的epoll_wait再次触发。<br>
ET（边缘触发）：ET在发现有我们感兴趣的事件发生后，立即返回，并且sleep这一事件的epoll_wait，不管该事件有没有结束。<br>
在使用ET模式时，必须要保证该文件描述符是非阻塞的（确保在没有数据可读时，该文件描述符不会一直阻塞）；并且每次调用read和write的时候都必须等到它们返回EWOULDBLOCK（确保所有数据都已读完或写完）。</p>
<ol>
<li>Web服务器如何处理以及响应接收到的HTTP请求报文呢?<br>
该项目使用线程池（半同步半反应堆模式）并发处理用户请求，主线程负责读写，工作线程（线程池中的线程）负责处理逻辑（HTTP请求报文的解析等等）。通过之前的代码，我们将listenfd上到达的connection通过 accept()接收，并返回一个新的socket文件描述符connfd用于和用户通信，并对用户请求返回响应，同时将这个connfd注册到内核事件表中，等用户发来请求报文。这个过程是：通过epoll_wait发现这个connfd上有可读事件了（EPOLLIN），主线程就将这个HTTP的请求报文读进这个连接socket的读缓存中users[sockfd].read()，然后将该任务对象（指针）插入线程池的请求队列中pool-&gt;append(users + sockfd);，线程池的实现还需要依靠锁机制以及信号量机制来实现线程同步，保证操作的原子性。<br>
在线程池部分做几点解释，然后大家去看代码的时候就更容易看懂了：</li>
</ol>
<p>所谓线程池，就是一个pthread_t类型的普通数组，通过pthread_create()函数创建m_thread_number个线程，用来执行worker()函数以执行每个请求处理函数（HTTP请求的process函数），通过pthread_detach()将线程设置成脱离态（detached）后，当这一线程运行结束时，它的资源会被系统自动回收，而不再需要在其它线程中对其进行 pthread_join() 操作。<br>
操作工作队列一定要加锁（locker），因为它被所有线程共享。<br>
我们用信号量来标识请求队列中的请求数，通过m_queuestat.wait();来等待一个请求队列中待处理的HTTP请求，然后交给线程池中的空闲线程来处理。<br>
为什么要使用线程池？<br>
当你需要限制你应用程序中同时运行的线程数时，线程池非常有用。因为启动一个新线程会带来性能开销，每个线程也会为其堆栈分配一些内存等。为了任务的并发执行，我们可以将这些任务任务传递到线程池，而不是为每个任务动态开启一个新的线程。</p>
<p>⭐️线程池中的线程数量是依据什么确定的？</p>
<p>在StackOverflow上面发现了一个还不错的回答，意思是：<br>
线程池中的线程数量最直接的限制因素是中央处理器(CPU)的处理器(processors/cores)的数量N：如果你的CPU是4-cores的，对于CPU密集型的任务(如视频剪辑等消耗CPU计算资源的任务)来说，那线程池中的线程数量最好也设置为4（或者+1防止其他因素造成的线程阻塞）；对于IO密集型的任务，一般要多于CPU的核数，因为线程间竞争的不是CPU的计算资源而是IO，IO的处理一般较慢，多于cores数的线程将为CPU争取更多的任务，不至在线程处理IO的过程造成CPU空闲导致资源浪费，公式：最佳线程数 = CPU当前可使用的Cores数 * 当前CPU的利用率 * (1 + CPU等待时间 / CPU处理时间)（还有回答里面提到的Amdahl准则可以了解一下）</p>
<p>OK，接下来说说每个read()后的HTTP请求是如何被处理的，我们直接看这个处理HTTP请求的入口函数：</p>
<pre><code class="language-C++">void http_conn::process() {
    HTTP_CODE read_ret = process_read();
    if(read_ret == NO_REQUEST) {
        modfd(m_epollfd, m_sockfd, EPOLLIN);
        return;
    }
    bool write_ret = process_write(read_ret);
    if(!write_ret)
        close_conn();
    modfd(m_epollfd, m_sockfd, EPOLLOUT);
}
</code></pre>
<p>首先，process_read()，也就是对我们读入该connfd读缓冲区的请求报文进行解析。<br>
HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据四个部分组成有。两种请求报文（例子来自社长的详解文章：<br>
GET（Example）</p>
<pre><code>GET /562f25980001b1b106000338.jpg HTTP/1.1
Host:img.mukewang.com
User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
Accept:image/webp,image/*,*/*;q=0.8
Referer:http://www.imooc.com/
Accept-Encoding:gzip, deflate, sdch
Accept-Language:zh-CN,zh;q=0.8
空行
</code></pre>
<p>请求数据为空<br>
POST（Example，注意POST的请求内容不为空）</p>
<pre><code>POST / HTTP1.1
Host:www.wrox.com
User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
Content-Type:application/x-www-form-urlencoded
Content-Length:40
Connection: Keep-Alive
空行
name=Professional%20Ajax&amp;publisher=Wiley
</code></pre>
<p>GET和POST的区别</p>
<p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。<br>
GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>
GET请求在URL中传送的参数是有长度限制。（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。<br>
GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100（指示信息—表示请求已接收，继续处理）continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br>
参考社长的文章：最新版Web服务器项目详解 - 05 http连接处理（中）<br>
process_read()函数的作用就是将类似上述例子的请求报文进行解析，因为用户的请求内容包含在这个请求报文里面，只有通过解析，知道用户请求的内容是什么，是请求图片，还是视频，或是其他请求，我们根据这些请求返回相应的HTML页面等。项目中使用主从状态机的模式进行解析，从状态机（parse_line）负责读取报文的一行，主状态机负责对该行数据进行解析，主状态机内部调用从状态机，从状态机驱动主状态机。每解析一部分都会将整个请求的m_check_state状态改变，状态机也就是根据这个状态来进行不同部分的解析跳转的：</p>
<p>parse_request_line(text)，解析请求行，也就是GET中的GET /562f25980001b1b106000338.jpg HTTP/1.1这一行，或者POST中的POST / HTTP1.1这一行。通过请求行的解析我们可以判断该HTTP请求的类型（GET/POST），而请求行中最重要的部分就是URL部分，我们会将这部分保存下来用于后面的生成HTTP响应。<br>
parse_headers(text);，解析请求头部，GET和POST中空行以上，请求行以下的部分。<br>
parse_content(text);，解析请求数据，对于GET来说这部分是空的，因为这部分内容已经以明文的方式包含在了请求行中的URL部分了；只有POST的这部分是有数据的，项目中的这部分数据为用户名和密码，我们会根据这部分内容做登录和校验，并涉及到与数据库的连接。<br>
OK，经过上述解析，当得到一个完整的，正确的HTTP请求时，就到了do_request代码部分，我们需要首先对GET请求和不同POST请求（登录，注册，请求图片，视频等等）做不同的预处理，然后分析目标文件的属性，若目标文件存在、对所有用户可读且不是目录时，则使用mmap将其映射到内存地址m_file_address处，并告诉调用者获取文件成功。</p>
<p>抛开mmap这部分，先来看看这些不同请求是怎么来的：<br>
假设你已经搭好了你的HTTP服务器，然后你在本地浏览器中键入localhost:9000，然后回车，这时候你就给你的服务器发送了一个GET请求，什么都没做，然后服务器端就会解析你的这个HTTP请求，然后发现是个GET请求，然后返回给你一个静态HTML页面，也就是项目中的judge.html页面，那POST请求怎么来的呢？这时你会发现，返回的这个judge页面中包含着一些新用户和已有账号这两个button元素，当你用鼠标点击这个button时，你的浏览器就会向你的服务器发送一个POST请求，服务器段通过检查action来判断你的POST请求类型是什么，进而做出不同的响应。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++基础知识（二）]]></title>
        <id>https://tangyin1.github.io/post/cji-chu-zhi-shi-er/</id>
        <link href="https://tangyin1.github.io/post/cji-chu-zhi-shi-er/">
        </link>
        <updated>2023-09-04T13:47:23.000Z</updated>
        <summary type="html"><![CDATA[<p>💡💡💡黑马程序员C++同步笔记💡💡💡</p>
]]></summary>
        <content type="html"><![CDATA[<p>💡💡💡黑马程序员C++同步笔记💡💡💡</p>
<!-- more -->
<ul>
<li>本阶段主要针对C++<mark>泛型编程</mark>和<mark>STL</mark>技术做详细讲解，探讨C++更深层的使用</li>
</ul>
<h2 id="1-模板">1 模板</h2>
<h3 id="11-模板的概念">1.1 模板的概念</h3>
<p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p>
<p>例如生活中的模板</p>
<p>一寸照片模板：</p>
<figure data-type="image" tabindex="1"><img src="assets/1547105026929.png" alt="1547105026929" loading="lazy"></figure>
<p>PPT模板：</p>
<figure data-type="image" tabindex="2"><img src="assets/1547103297864.png" alt="1547103297864" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="assets/1547103359158.png" alt="1547103359158" loading="lazy"></figure>
<p>模板的特点：</p>
<ul>
<li>模板不可以直接使用，它只是一个框架</li>
<li>模板的通用并不是万能的</li>
</ul>
<h3 id="12-函数模板">1.2 函数模板</h3>
<ul>
<li>
<p>C++另一种编程思想称为 <mark>泛型编程</mark> ，主要利用的技术就是模板</p>
</li>
<li>
<p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p>
</li>
</ul>
<h4 id="121-函数模板语法">1.2.1 函数模板语法</h4>
<p>函数模板作用：</p>
<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>
<p><strong>语法：</strong></p>
<pre><code class="language-C++">template&lt;typename T&gt;
函数声明或定义
</code></pre>
<p><strong>解释：</strong></p>
<p>template  ---  声明创建模板</p>
<p>typename  --- 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T    ---   通用的数据类型，名称可以替换，通常为大写字母</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//交换整型函数
void swapInt(int&amp; a, int&amp; b) {
	int temp = a;
	a = b;
	b = temp;
}

//交换浮点型函数
void swapDouble(double&amp; a, double&amp; b) {
	double temp = a;
	a = b;
	b = temp;
}

//利用模板提供通用的交换函数
template&lt;typename T&gt;
void mySwap(T&amp; a, T&amp; b)
{
	T temp = a;
	a = b;
	b = temp;
}

void test01()
{
	int a = 10;
	int b = 20;
	
	//swapInt(a, b);

	//利用模板实现交换
	//1、自动类型推导
	mySwap(a, b);

	//2、显示指定类型
	mySwap&lt;int&gt;(a, b);

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>函数模板利用关键字 template</li>
<li>使用函数模板有两种方式：自动类型推导、显示指定类型</li>
<li>模板的目的是为了提高复用性，将类型参数化</li>
</ul>
<h4 id="122-函数模板注意事项">1.2.2 函数模板注意事项</h4>
<p>注意事项：</p>
<ul>
<li>
<p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p>
</li>
<li>
<p>模板必须要确定出T的数据类型，才可以使用</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//利用模板提供通用的交换函数
template&lt;class T&gt;
void mySwap(T&amp; a, T&amp; b)
{
	T temp = a;
	a = b;
	b = temp;
}


// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用
void test01()
{
	int a = 10;
	int b = 20;
	char c = 'c';

	mySwap(a, b); // 正确，可以推导出一致的T
	//mySwap(a, c); // 错误，推导不出一致的T类型
}


// 2、模板必须要确定出T的数据类型，才可以使用
template&lt;class T&gt;
void func()
{
	cout &lt;&lt; &quot;func 调用&quot; &lt;&lt; endl;
}

void test02()
{
	//func(); //错误，模板不能独立使用，必须确定出T的类型
	func&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板
}

int main() {

	test01();
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li>
</ul>
<h4 id="123-函数模板案例">1.2.3 函数模板案例</h4>
<p>案例描述：</p>
<ul>
<li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li>
<li>排序规则从大到小，排序算法为<strong>选择排序</strong></li>
<li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li>
</ul>
<p>示例：</p>
<pre><code class="language-C++">//交换的函数模板
template&lt;typename T&gt;
void mySwap(T &amp;a, T&amp;b)
{
	T temp = a;
	a = b;
	b = temp;
}


template&lt;class T&gt; // 也可以替换成typename
//利用选择排序，进行对数组从大到小的排序
void mySort(T arr[], int len)
{
	for (int i = 0; i &lt; len; i++)
	{
		int max = i; //最大数的下标
		for (int j = i + 1; j &lt; len; j++)
		{
			if (arr[max] &lt; arr[j])
			{
				max = j;
			}
		}
		if (max != i) //如果最大数的下标不是i，交换两者
		{
			mySwap(arr[max], arr[i]);
		}
	}
}
template&lt;typename T&gt;
void printArray(T arr[], int len) {

	for (int i = 0; i &lt; len; i++) {
		cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}
void test01()
{
	//测试char数组
	char charArr[] = &quot;bdcfeagh&quot;;
	int num = sizeof(charArr) / sizeof(char);
	mySort(charArr, num);
	printArray(charArr, num);
}

void test02()
{
	//测试int数组
	int intArr[] = { 7, 5, 8, 1, 3, 9, 2, 4, 6 };
	int num = sizeof(intArr) / sizeof(int);
	mySort(intArr, num);
	printArray(intArr, num);
}

int main() {

	test01();
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：模板可以提高代码复用，需要熟练掌握</p>
<h4 id="124-普通函数与函数模板的区别">1.2.4 普通函数与函数模板的区别</h4>
<p><strong>普通函数与函数模板区别：</strong></p>
<ul>
<li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li>
<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>
<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//普通函数
int myAdd01(int a, int b)
{
	return a + b;
}

//函数模板
template&lt;class T&gt;
T myAdd02(T a, T b)  
{
	return a + b;
}

//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换
void test01()
{
	int a = 10;
	int b = 20;
	char c = 'c';
	
	cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99

	//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换

	myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p>
<h4 id="125-普通函数与函数模板的调用规则">1.2.5 普通函数与函数模板的调用规则</h4>
<p>调用规则如下：</p>
<ol>
<li>如果函数模板和普通函数都可以实现，优先调用普通函数</li>
<li>可以通过空模板参数列表来强制调用函数模板</li>
<li>函数模板也可以发生重载</li>
<li>如果函数模板可以产生更好的匹配,优先调用函数模板</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//普通函数与函数模板调用规则
void myPrint(int a, int b)
{
	cout &lt;&lt; &quot;调用的普通函数&quot; &lt;&lt; endl;
}

template&lt;typename T&gt;
void myPrint(T a, T b) 
{ 
	cout &lt;&lt; &quot;调用的模板&quot; &lt;&lt; endl;
}

template&lt;typename T&gt;
void myPrint(T a, T b, T c) 
{ 
	cout &lt;&lt; &quot;调用重载的模板&quot; &lt;&lt; endl; 
}

void test01()
{
	//1、如果函数模板和普通函数都可以实现，优先调用普通函数
	// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到
	int a = 10;
	int b = 20;
	myPrint(a, b); //调用普通函数

	//2、可以通过空模板参数列表来强制调用函数模板
	myPrint&lt;&gt;(a, b); //调用函数模板

	//3、函数模板也可以发生重载
	int c = 30;
	myPrint(a, b, c); //调用重载的函数模板

	//4、 如果函数模板可以产生更好的匹配,优先调用函数模板
	char c1 = 'a';
	char c2 = 'b';
	myPrint(c1, c2); //调用函数模板
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p>
<h4 id="126-模板的局限性">1.2.6 模板的局限性</h4>
<p><strong>局限性：</strong></p>
<ul>
<li>模板的通用性并不是万能的</li>
</ul>
<p><strong>例如：</strong></p>
<pre><code class="language-C++">	template&lt;class T&gt;
	void f(T a, T b)
	{ 
    	a = b;
    }
</code></pre>
<p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p>
<p>再例如：</p>
<pre><code class="language-C++">	template&lt;class T&gt;
	void f(T a, T b)
	{ 
    	if(a &gt; b) { ... }
    }
</code></pre>
<p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p>
<p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

#include &lt;string&gt;

class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}
	string m_Name;
	int m_Age;
};

//普通函数模板
template&lt;class T&gt;
bool myCompare(T&amp; a, T&amp; b)
{
	if (a == b)
	{
		return true;
	}
	else
	{
		return false;
	}
}


//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型
//具体化优先于常规模板
template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)
{
	if ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void test01()
{
	int a = 10;
	int b = 20;
	//内置数据类型可以直接使用通用的函数模板
	bool ret = myCompare(a, b);
	if (ret)
	{
		cout &lt;&lt; &quot;a == b &quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;a != b &quot; &lt;&lt; endl;
	}
}

void test02()
{
	Person p1(&quot;Tom&quot;, 10);
	Person p2(&quot;Tom&quot;, 10);
	//自定义数据类型，不会调用普通的函数模板
	//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型
	bool ret = myCompare(p1, p2);
	if (ret)
	{
		cout &lt;&lt; &quot;p1 == p2 &quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;p1 != p2 &quot; &lt;&lt; endl;
	}
}

int main() {

	test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>利用具体化的模板，可以解决自定义类型的通用化</li>
<li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li>
</ul>
<h3 id="13-类模板">1.3 类模板</h3>
<h4 id="131-类模板语法">1.3.1 类模板语法</h4>
<p>类模板作用：</p>
<ul>
<li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li>
</ul>
<p><strong>语法：</strong></p>
<pre><code class="language-c++">template&lt;typename T&gt;
类
</code></pre>
<p><strong>解释：</strong></p>
<p>template  ---  声明创建模板</p>
<p>typename  --- 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T    ---   通用的数据类型，名称可以替换，通常为大写字母</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;
//类模板
template&lt;class NameType, class AgeType&gt; 
class Person
{
public:
	Person(NameType name, AgeType age)
	{
		this-&gt;mName = name;
		this-&gt;mAge = age;
	}
	void showPerson()
	{
		cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;
	}
public:
	NameType mName;
	AgeType mAge;
};

void test01()
{
	// 指定NameType 为string类型，AgeType 为 int类型
	Person&lt;string, int&gt;P1(&quot;孙悟空&quot;, 999);
	P1.showPerson();
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p>
<h4 id="132-类模板与函数模板区别">1.3.2 类模板与函数模板区别</h4>
<p>类模板与函数模板区别主要有两点：</p>
<ol>
<li>类模板没有自动类型推导的使用方式</li>
<li>类模板在模板参数列表中可以有默认参数</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;
//类模板
template&lt;class NameType, class AgeType = int&gt; 
class Person
{
public:
	Person(NameType name, AgeType age)
	{
		this-&gt;mName = name;
		this-&gt;mAge = age;
	}
	void showPerson()
	{
		cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;
	}
public:
	NameType mName;
	AgeType mAge;
};

//1、类模板没有自动类型推导的使用方式
void test01()
{
	// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导
	Person &lt;string ,int&gt;p(&quot;孙悟空&quot;, 1000); //必须使用显示指定类型的方式，使用类模板
	p.showPerson();
}

//2、类模板在模板参数列表中可以有默认参数
void test02()
{
	Person &lt;string&gt; p(&quot;猪八戒&quot;, 999); //类模板中的模板参数列表 可以指定默认参数
	p.showPerson();
}

int main() {

	test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>类模板使用只能用显示指定类型方式</li>
<li>类模板中的模板参数列表可以有默认参数</li>
</ul>
<h4 id="133-类模板中成员函数创建时机">1.3.3 类模板中成员函数创建时机</h4>
<p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>
<ul>
<li>普通类中的成员函数一开始就可以创建</li>
<li>类模板中的成员函数在调用时才创建</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person1
{
public:
	void showPerson1()
	{
		cout &lt;&lt; &quot;Person1 show&quot; &lt;&lt; endl;
	}
};

class Person2
{
public:
	void showPerson2()
	{
		cout &lt;&lt; &quot;Person2 show&quot; &lt;&lt; endl;
	}
};

template&lt;class T&gt;
class MyClass
{
public:
	T obj;

	//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成

	void fun1() { obj.showPerson1(); }
	void fun2() { obj.showPerson2(); }

};

void test01()
{
	MyClass&lt;Person1&gt; m;
	
	m.fun1();

	//m.fun2();//编译会出错，说明函数调用才会去创建成员函数
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p>
<h4 id="134-类模板对象做函数参数">1.3.4 类模板对象做函数参数</h4>
<p>学习目标：</p>
<ul>
<li>类模板实例化出的对象，向函数传参的方式</li>
</ul>
<p>一共有三种传入方式：</p>
<ol>
<li>指定传入的类型   --- 直接显示对象的数据类型</li>
<li>参数模板化           --- 将对象中的参数变为模板进行传递</li>
<li>整个类模板化       --- 将这个对象类型 模板化进行传递</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;
//类模板
template&lt;class NameType, class AgeType = int&gt; 
class Person
{
public:
	Person(NameType name, AgeType age)
	{
		this-&gt;mName = name;
		this-&gt;mAge = age;
	}
	void showPerson()
	{
		cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl;
	}
public:
	NameType mName;
	AgeType mAge;
};

//1、指定传入的类型
void printPerson1(Person&lt;string, int&gt; &amp;p) 
{
	p.showPerson();
}
void test01()
{
	Person &lt;string, int &gt;p(&quot;孙悟空&quot;, 100);
	printPerson1(p);
}

//2、参数模板化
template &lt;class T1, class T2&gt;
void printPerson2(Person&lt;T1, T2&gt;&amp;p)
{
	p.showPerson();
	cout &lt;&lt; &quot;T1的类型为： &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl;
	cout &lt;&lt; &quot;T2的类型为： &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;
}
void test02()
{
	Person &lt;string, int &gt;p(&quot;猪八戒&quot;, 90);
	printPerson2(p);
}

//3、整个类模板化
template&lt;class T&gt;
void printPerson3(T &amp; p)
{
	cout &lt;&lt; &quot;T的类型为： &quot; &lt;&lt; typeid(T).name() &lt;&lt; endl;
	p.showPerson();

}
void test03()
{
	Person &lt;string, int &gt;p(&quot;唐僧&quot;, 30);
	printPerson3(p);
}

int main() {

	test01();
	test02();
	test03();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li>
<li>使用比较广泛是第一种：指定传入的类型</li>
</ul>
<h4 id="135-类模板与继承">1.3.5 类模板与继承</h4>
<p>当类模板碰到继承时，需要注意一下几点：</p>
<ul>
<li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li>
<li>如果不指定，编译器无法给子类分配内存</li>
<li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">template&lt;class T&gt;
class Base
{
	T m;
};

//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承
class Son :public Base&lt;int&gt; //必须指定一个类型
{
};
void test01()
{
	Son c;
}

//类模板继承类模板 ,可以用T2指定父类中的T类型
template&lt;class T1, class T2&gt;
class Son2 :public Base&lt;T2&gt;
{
public:
	Son2()
	{
		cout &lt;&lt; typeid(T1).name() &lt;&lt; endl;
		cout &lt;&lt; typeid(T2).name() &lt;&lt; endl;
	}
};

void test02()
{
	Son2&lt;int, char&gt; child1;
}


int main() {

	test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p>
<h4 id="136-类模板成员函数类外实现">1.3.6 类模板成员函数类外实现</h4>
<p>学习目标：能够掌握类模板中的成员函数类外实现</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;

//类模板中成员函数类外实现
template&lt;class T1, class T2&gt;
class Person {
public:
	//成员函数类内声明
	Person(T1 name, T2 age);
	void showPerson();

public:
	T1 m_Name;
	T2 m_Age;
};

//构造函数 类外实现
template&lt;class T1, class T2&gt;
Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {
	this-&gt;m_Name = name;
	this-&gt;m_Age = age;
}

//成员函数 类外实现
template&lt;class T1, class T2&gt;
void Person&lt;T1, T2&gt;::showPerson() {
	cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;
}

void test01()
{
	Person&lt;string, int&gt; p(&quot;Tom&quot;, 20);
	p.showPerson();
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p>
<h4 id="137-类模板分文件编写">1.3.7 类模板分文件编写</h4>
<p>学习目标：</p>
<ul>
<li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li>
</ul>
<p>问题：</p>
<ul>
<li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li>
</ul>
<p>解决：</p>
<ul>
<li>解决方式1：直接包含.cpp源文件</li>
<li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li>
</ul>
<p><strong>示例：</strong></p>
<p>person.hpp中代码：</p>
<pre><code class="language-C++">#pragma once
#include &lt;iostream&gt;
using namespace std;
#include &lt;string&gt;

template&lt;class T1, class T2&gt;
class Person {
public:
	Person(T1 name, T2 age);
	void showPerson();
public:
	T1 m_Name;
	T2 m_Age;
};

//构造函数 类外实现
template&lt;class T1, class T2&gt;
Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {
	this-&gt;m_Name = name;
	this-&gt;m_Age = age;
}

//成员函数 类外实现
template&lt;class T1, class T2&gt;
void Person&lt;T1, T2&gt;::showPerson() {
	cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;
}
</code></pre>
<p>类模板分文件编写.cpp中代码</p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

//#include &quot;person.h&quot;
#include &quot;person.cpp&quot; //解决方式1，包含cpp源文件

//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp
#include &quot;person.hpp&quot;
void test01()
{
	Person&lt;string, int&gt; p(&quot;Tom&quot;, 10);
	p.showPerson();
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>
<h4 id="138-类模板与友元">1.3.8 类模板与友元</h4>
<p>学习目标：</p>
<ul>
<li>掌握类模板配合友元函数的类内和类外实现</li>
</ul>
<p>全局函数类内实现 - 直接在类内声明友元即可</p>
<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;

//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元
template&lt;class T1, class T2&gt; class Person;

//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到
//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); 

template&lt;class T1, class T2&gt;
void printPerson2(Person&lt;T1, T2&gt; &amp; p)
{
	cout &lt;&lt; &quot;类外实现 ---- 姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;
}

template&lt;class T1, class T2&gt;
class Person
{
	//1、全局函数配合友元   类内实现
	friend void printPerson(Person&lt;T1, T2&gt; &amp; p)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;
	}


	//全局函数配合友元  类外实现
	friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);

public:

	Person(T1 name, T2 age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}


private:
	T1 m_Name;
	T2 m_Age;

};

//1、全局函数在类内实现
void test01()
{
	Person &lt;string, int &gt;p(&quot;Tom&quot;, 20);
	printPerson(p);
}


//2、全局函数在类外实现
void test02()
{
	Person &lt;string, int &gt;p(&quot;Jerry&quot;, 30);
	printPerson2(p);
}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>
<h4 id="139-类模板案例">1.3.9 类模板案例</h4>
<p>案例描述:  实现一个通用的数组类，要求如下：</p>
<ul>
<li>可以对内置数据类型以及自定义数据类型的数据进行存储</li>
<li>将数组中的数据存储到堆区</li>
<li>构造函数中可以传入数组的容量</li>
<li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li>
<li>提供尾插法和尾删法对数组中的数据进行增加和删除</li>
<li>可以通过下标的方式访问数组中的元素</li>
<li>可以获取数组中当前元素个数和数组的容量</li>
</ul>
<p><strong>示例：</strong></p>
<p>myArray.hpp中代码</p>
<pre><code class="language-C++">#pragma once
#include &lt;iostream&gt;
using namespace std;

template&lt;class T&gt;
class MyArray
{
public:
    
	//构造函数
	MyArray(int capacity)
	{
		this-&gt;m_Capacity = capacity;
		this-&gt;m_Size = 0;
		pAddress = new T[this-&gt;m_Capacity];
	}

	//拷贝构造
	MyArray(const MyArray &amp; arr)
	{
		this-&gt;m_Capacity = arr.m_Capacity;
		this-&gt;m_Size = arr.m_Size;
		this-&gt;pAddress = new T[this-&gt;m_Capacity];
		for (int i = 0; i &lt; this-&gt;m_Size; i++)
		{
			//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，
			// 普通类型可以直接= 但是指针类型需要深拷贝
			this-&gt;pAddress[i] = arr.pAddress[i];
		}
	}

	//重载= 操作符  防止浅拷贝问题
	MyArray&amp; operator=(const MyArray&amp; myarray) {

		if (this-&gt;pAddress != NULL) {
			delete[] this-&gt;pAddress;
			this-&gt;m_Capacity = 0;
			this-&gt;m_Size = 0;
		}

		this-&gt;m_Capacity = myarray.m_Capacity;
		this-&gt;m_Size = myarray.m_Size;
		this-&gt;pAddress = new T[this-&gt;m_Capacity];
		for (int i = 0; i &lt; this-&gt;m_Size; i++) {
			this-&gt;pAddress[i] = myarray[i];
		}
		return *this;
	}

	//重载[] 操作符  arr[0]
	T&amp; operator [](int index)
	{
		return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理
	}

	//尾插法
	void Push_back(const T &amp; val)
	{
		if (this-&gt;m_Capacity == this-&gt;m_Size)
		{
			return;
		}
		this-&gt;pAddress[this-&gt;m_Size] = val;
		this-&gt;m_Size++;
	}

	//尾删法
	void Pop_back()
	{
		if (this-&gt;m_Size == 0)
		{
			return;
		}
		this-&gt;m_Size--;
	}

	//获取数组容量
	int getCapacity()
	{
		return this-&gt;m_Capacity;
	}

	//获取数组大小
	int	getSize()
	{
		return this-&gt;m_Size;
	}


	//析构
	~MyArray()
	{
		if (this-&gt;pAddress != NULL)
		{
			delete[] this-&gt;pAddress;
			this-&gt;pAddress = NULL;
			this-&gt;m_Capacity = 0;
			this-&gt;m_Size = 0;
		}
	}

private:
	T * pAddress;  //指向一个堆空间，这个空间存储真正的数据
	int m_Capacity; //容量
	int m_Size;   // 大小
};
</code></pre>
<p>类模板案例—数组类封装.cpp中</p>
<pre><code class="language-C++">#include &quot;myArray.hpp&quot;
#include &lt;string&gt;

void printIntArray(MyArray&lt;int&gt;&amp; arr) {
	for (int i = 0; i &lt; arr.getSize(); i++) {
		cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//测试内置数据类型
void test01()
{
	MyArray&lt;int&gt; array1(10);
	for (int i = 0; i &lt; 10; i++)
	{
		array1.Push_back(i);
	}
	cout &lt;&lt; &quot;array1打印输出：&quot; &lt;&lt; endl;
	printIntArray(array1);
	cout &lt;&lt; &quot;array1的大小：&quot; &lt;&lt; array1.getSize() &lt;&lt; endl;
	cout &lt;&lt; &quot;array1的容量：&quot; &lt;&lt; array1.getCapacity() &lt;&lt; endl;

	cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl;

	MyArray&lt;int&gt; array2(array1);
	array2.Pop_back();
	cout &lt;&lt; &quot;array2打印输出：&quot; &lt;&lt; endl;
	printIntArray(array2);
	cout &lt;&lt; &quot;array2的大小：&quot; &lt;&lt; array2.getSize() &lt;&lt; endl;
	cout &lt;&lt; &quot;array2的容量：&quot; &lt;&lt; array2.getCapacity() &lt;&lt; endl;
}

//测试自定义数据类型
class Person {
public:
	Person() {} 
		Person(string name, int age) {
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}
public:
	string m_Name;
	int m_Age;
};

void printPersonArray(MyArray&lt;Person&gt;&amp; personArr)
{
	for (int i = 0; i &lt; personArr.getSize(); i++) {
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; personArr[i].m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; personArr[i].m_Age &lt;&lt; endl;
	}

}

void test02()
{
	//创建数组
	MyArray&lt;Person&gt; pArray(10);
	Person p1(&quot;孙悟空&quot;, 30);
	Person p2(&quot;韩信&quot;, 20);
	Person p3(&quot;妲己&quot;, 18);
	Person p4(&quot;王昭君&quot;, 15);
	Person p5(&quot;赵云&quot;, 24);

	//插入数据
	pArray.Push_back(p1);
	pArray.Push_back(p2);
	pArray.Push_back(p3);
	pArray.Push_back(p4);
	pArray.Push_back(p5);

	printPersonArray(pArray);

	cout &lt;&lt; &quot;pArray的大小：&quot; &lt;&lt; pArray.getSize() &lt;&lt; endl;
	cout &lt;&lt; &quot;pArray的容量：&quot; &lt;&lt; pArray.getCapacity() &lt;&lt; endl;

}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>能够利用所学知识点实现通用的数组</p>
<h2 id="2-stl初识">2 STL初识</h2>
<h3 id="21-stl的诞生">2.1 STL的诞生</h3>
<ul>
<li>
<p>长久以来，软件界一直希望建立一种可重复利用的东西</p>
</li>
<li>
<p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p>
</li>
<li>
<p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p>
</li>
<li>
<p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p>
</li>
</ul>
<h3 id="22-stl基本概念">2.2 STL基本概念</h3>
<ul>
<li>STL(Standard Template Library,<strong>标准模板库</strong>)</li>
<li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li>
<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>
<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>
</ul>
<h3 id="23-stl六大组件">2.3 STL六大组件</h3>
<p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>
<ol>
<li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li>
<li>算法：各种常用的算法，如sort、find、copy、for_each等</li>
<li>迭代器：扮演了容器与算法之间的胶合剂。</li>
<li>仿函数：行为类似函数，可作为算法的某种策略。</li>
<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>
<li>空间配置器：负责空间的配置与管理。</li>
</ol>
<h3 id="24-stl中容器-算法-迭代器">2.4  STL中容器、算法、迭代器</h3>
<p>**容器：**置物之所也</p>
<p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>
<p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p>
<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>
<p>​	<strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>
​	<strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p>
<p>**算法：**问题之解法也</p>
<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p>
<p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p>
<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>
<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>
<p>**迭代器：**容器和算法之间粘合剂</p>
<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>
<p>每个容器都有自己专属的迭代器</p>
<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>
<p>迭代器种类：</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>功能</th>
<th>支持运算</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入迭代器</td>
<td>对数据的只读访问</td>
<td>只读，支持++、==、！=</td>
</tr>
<tr>
<td>输出迭代器</td>
<td>对数据的只写访问</td>
<td>只写，支持++</td>
</tr>
<tr>
<td>前向迭代器</td>
<td>读写操作，并能向前推进迭代器</td>
<td>读写，支持++、==、！=</td>
</tr>
<tr>
<td>双向迭代器</td>
<td>读写操作，并能向前和向后操作</td>
<td>读写，支持++、--，</td>
</tr>
<tr>
<td>随机访问迭代器</td>
<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>
<td>读写，支持++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td>
</tr>
</tbody>
</table>
<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>
<h3 id="25-容器算法迭代器初识">2.5 容器算法迭代器初识</h3>
<p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p>
<p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>
<h4 id="251-vector存放内置数据类型">2.5.1 vector存放内置数据类型</h4>
<p>容器：     <code>vector</code></p>
<p>算法：     <code>for_each</code></p>
<p>迭代器： <code>vector&lt;int&gt;::iterator</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;

void MyPrint(int val)
{
	cout &lt;&lt; val &lt;&lt; endl;
}

void test01() {

	//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型
	vector&lt;int&gt; v;
	//向容器中放数据
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素
	//v.begin()返回迭代器，这个迭代器指向容器中第一个数据
	//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置
	//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型

	vector&lt;int&gt;::iterator pBegin = v.begin();
	vector&lt;int&gt;::iterator pEnd = v.end();

	//第一种遍历方式：
	while (pBegin != pEnd) {
		cout &lt;&lt; *pBegin &lt;&lt; endl;
		pBegin++;
	}

	
	//第二种遍历方式：
	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; endl;
	}
	cout &lt;&lt; endl;

	//第三种遍历方式：
	//使用STL提供标准遍历算法  头文件 algorithm
	for_each(v.begin(), v.end(), MyPrint);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="252-vector存放自定义数据类型">2.5.2 Vector存放自定义数据类型</h4>
<p>学习目标：vector中存放自定义数据类型，并打印输出</p>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;vector&gt;
#include &lt;string&gt;

//自定义数据类型
class Person {
public:
	Person(string name, int age) {
		mName = name;
		mAge = age;
	}
public:
	string mName;
	int mAge;
};
//存放对象
void test01() {

	vector&lt;Person&gt; v;

	//创建数据
	Person p1(&quot;aaa&quot;, 10);
	Person p2(&quot;bbb&quot;, 20);
	Person p3(&quot;ccc&quot;, 30);
	Person p4(&quot;ddd&quot;, 40);
	Person p5(&quot;eee&quot;, 50);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);

	for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl;

	}
}


//放对象指针
void test02() {

	vector&lt;Person*&gt; v;

	//创建数据
	Person p1(&quot;aaa&quot;, 10);
	Person p2(&quot;bbb&quot;, 20);
	Person p3(&quot;ccc&quot;, 30);
	Person p4(&quot;ddd&quot;, 40);
	Person p5(&quot;eee&quot;, 50);

	v.push_back(&amp;p1);
	v.push_back(&amp;p2);
	v.push_back(&amp;p3);
	v.push_back(&amp;p4);
	v.push_back(&amp;p5);

	for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) {
		Person * p = (*it);
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;
	}
}


int main() {

	test01();
    
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="253-vector容器嵌套容器">2.5.3 Vector容器嵌套容器</h4>
<p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

//容器嵌套容器
void test01() {

	vector&lt; vector&lt;int&gt; &gt;  v;

	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	vector&lt;int&gt; v3;
	vector&lt;int&gt; v4;

	for (int i = 0; i &lt; 4; i++) {
		v1.push_back(i + 1);
		v2.push_back(i + 2);
		v3.push_back(i + 3);
		v4.push_back(i + 4);
	}

	//将容器元素插入到vector v中
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);


	for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) {

		for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) {
			cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; endl;
	}

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h2 id="3-stl-常用容器">3 STL- 常用容器</h2>
<h3 id="31-string容器">3.1 string容器</h3>
<h4 id="311-string基本概念">3.1.1 string基本概念</h4>
<p><strong>本质：</strong></p>
<ul>
<li>string是C++风格的字符串，而string本质上是一个类</li>
</ul>
<p><strong>string和char * 区别：</strong></p>
<ul>
<li>char * 是一个指针</li>
<li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li>
</ul>
<p><strong>特点：</strong></p>
<p>string 类内部封装了很多成员方法</p>
<p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p>
<p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p>
<h4 id="312-string构造函数">3.1.2 string构造函数</h4>
<p>构造函数原型：</p>
<ul>
<li><code>string();</code>          				//创建一个空的字符串 例如: string str;<br>
<code>string(const char* s);</code>	        //使用字符串s初始化</li>
<li><code>string(const string&amp; str);</code>    //使用一个string对象初始化另一个string对象</li>
<li><code>string(int n, char c);</code>           //使用n个字符c初始化</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;
//string构造
void test01()
{
	string s1; //创建空字符串，调用无参构造函数
	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; s1 &lt;&lt; endl;

	const char* str = &quot;hello world&quot;;
	string s2(str); //把c_string转换成了string

	cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; s2 &lt;&lt; endl;

	string s3(s2); //调用拷贝构造函数
	cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;

	string s4(10, 'a');
	cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：string的多种构造方式没有可比性，灵活使用即可</p>
<h4 id="313-string赋值操作">3.1.3 string赋值操作</h4>
<p>功能描述：</p>
<ul>
<li>给string字符串进行赋值</li>
</ul>
<p>赋值的函数原型：</p>
<ul>
<li><code>string&amp; operator=(const char* s);</code>             //char*类型字符串 赋值给当前的字符串</li>
<li><code>string&amp; operator=(const string &amp;s);</code>         //把字符串s赋给当前的字符串</li>
<li><code>string&amp; operator=(char c);</code>                          //字符赋值给当前的字符串</li>
<li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign(const char *s, int n);</code>     //把字符串s的前n个字符赋给当前的字符串</li>
<li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li>
<li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//赋值
void test01()
{
	string str1;
	str1 = &quot;hello world&quot;;
	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

	string str2;
	str2 = str1;
	cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; str2 &lt;&lt; endl;

	string str3;
	str3 = 'a';
	cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;

	string str4;
	str4.assign(&quot;hello c++&quot;);
	cout &lt;&lt; &quot;str4 = &quot; &lt;&lt; str4 &lt;&lt; endl;

	string str5;
	str5.assign(&quot;hello c++&quot;,5);
	cout &lt;&lt; &quot;str5 = &quot; &lt;&lt; str5 &lt;&lt; endl;


	string str6;
	str6.assign(str5);
	cout &lt;&lt; &quot;str6 = &quot; &lt;&lt; str6 &lt;&lt; endl;

	string str7;
	str7.assign(5, 'x');
	cout &lt;&lt; &quot;str7 = &quot; &lt;&lt; str7 &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>​	string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p>
<h4 id="314-string字符串拼接">3.1.4 string字符串拼接</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现在字符串末尾拼接字符串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string&amp; operator+=(const char* str);</code>                   //重载+=操作符</li>
<li><code>string&amp; operator+=(const char c);</code>                         //重载+=操作符</li>
<li><code>string&amp; operator+=(const string&amp; str);</code>                //重载+=操作符</li>
<li><code>string&amp; append(const char *s);</code>                               //把字符串s连接到当前字符串结尾</li>
<li><code>string&amp; append(const char *s, int n);</code>                 //把字符串s的前n个字符连接到当前字符串结尾</li>
<li><code>string&amp; append(const string &amp;s);</code>                           //同operator+=(const string&amp; str)</li>
<li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//字符串拼接
void test01()
{
	string str1 = &quot;我&quot;;

	str1 += &quot;爱玩游戏&quot;;

	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;
	
	str1 += ':';

	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

	string str2 = &quot;LOL DNF&quot;;

	str1 += str2;

	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

	string str3 = &quot;I&quot;;
	str3.append(&quot; love &quot;);
	str3.append(&quot;game abcde&quot;, 4);
	//str3.append(str2);
	str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾
	cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;
}
int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p>
<h4 id="315-string查找和替换">3.1.5 string查找和替换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找：查找指定字符串是否存在</li>
<li>替换：在指定的位置替换字符串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>int find(const string&amp; str, int pos = 0) const;</code>              //查找str第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos = 0) const;</code>                     //查找s第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos, int n) const;</code>               //从pos位置查找s的前n个字符第一次位置</li>
<li><code>int find(const char c, int pos = 0) const;</code>                       //查找字符c第一次出现位置</li>
<li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      //查找str最后一次位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos = npos) const;</code>              //查找s最后一次出现位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos, int n) const;</code>              //从pos查找s的前n个字符最后一次位置</li>
<li><code>int rfind(const char c, int pos = 0) const;</code>                      //查找字符c最后一次出现位置</li>
<li><code>string&amp; replace(int pos, int n, const string&amp; str);</code>       //替换从pos开始n个字符为字符串str</li>
<li><code>string&amp; replace(int pos, int n,const char* s);</code>                 //替换从pos开始的n个字符为字符串s</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//查找和替换
void test01()
{
	//查找
	string str1 = &quot;abcdefgde&quot;;

	int pos = str1.find(&quot;de&quot;);

	if (pos == -1)
	{
		cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;
	}
	

	pos = str1.rfind(&quot;de&quot;);

	cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;

}

void test02()
{
	//替换
	string str1 = &quot;abcdefgde&quot;;
	str1.replace(1, 3, &quot;1111&quot;);

	cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;
}

int main() {

	//test01();
	//test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>find查找是从左往后，rfind从右往左</li>
<li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li>
<li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>
</ul>
<h4 id="316-string字符串比较">3.1.6 string字符串比较</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>字符串之间的比较</li>
</ul>
<p><strong>比较方式：</strong></p>
<ul>
<li>字符串比较是按字符的ASCII码进行对比</li>
</ul>
<p>= 返回   0</p>
<p>&gt; 返回   1</p>
<p>&lt; 返回  -1</p>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>int compare(const string &amp;s) const;</code>  //与字符串s比较</li>
<li><code>int compare(const char *s) const;</code>      //与字符串s比较</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//字符串比较
void test01()
{

	string s1 = &quot;hello&quot;;
	string s2 = &quot;aello&quot;;

	int ret = s1.compare(s2);

	if (ret == 0) {
		cout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl;
	}
	else if (ret &gt; 0)
	{
		cout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl;
	}

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p>
<h4 id="317-string字符存取">3.1.7 string字符存取</h4>
<p>string中单个字符存取方式有两种</p>
<ul>
<li><code>char&amp; operator[](int n);</code>     //通过[]方式取字符</li>
<li><code>char&amp; at(int n);</code>                    //通过at方法获取字符</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">void test01()
{
	string str = &quot;hello world&quot;;

	for (int i = 0; i &lt; str.size(); i++)
	{
		cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	for (int i = 0; i &lt; str.size(); i++)
	{
		cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;


	//字符修改
	str[0] = 'x';
	str.at(1) = 'x';
	cout &lt;&lt; str &lt;&lt; endl;
	
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p>
<h4 id="318-string插入和删除">3.1.8 string插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对string字符串进行插入和删除字符操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string&amp; insert(int pos, const char* s);</code>                //插入字符串</li>
<li><code>string&amp; insert(int pos, const string&amp; str);</code>        //插入字符串</li>
<li><code>string&amp; insert(int pos, int n, char c);</code>                //在指定位置插入n个字符c</li>
<li><code>string&amp; erase(int pos, int n = npos);</code>                    //删除从Pos开始的n个字符</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//字符串插入和删除
void test01()
{
	string str = &quot;hello&quot;;
	str.insert(1, &quot;111&quot;);
	cout &lt;&lt; str &lt;&lt; endl;

	str.erase(1, 3);  //从1号位置开始3个字符
	cout &lt;&lt; str &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**插入和删除的起始下标都是从0开始</p>
<h4 id="319-string子串">3.1.9 string子串</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>从字符串中获取想要的子串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个字符组成的字符串</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//子串
void test01()
{

	string str = &quot;abcdefg&quot;;
	string subStr = str.substr(1, 3);
	cout &lt;&lt; &quot;subStr = &quot; &lt;&lt; subStr &lt;&lt; endl;

	string email = &quot;hello@sina.com&quot;;
	int pos = email.find(&quot;@&quot;);
	string username = email.substr(0, pos);
	cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**灵活的运用求子串功能，可以在实际开发中获取有效的信息</p>
<h3 id="32-vector容器">3.2 vector容器</h3>
<h4 id="321-vector基本概念">3.2.1 vector基本概念</h4>
<p><strong>功能：</strong></p>
<ul>
<li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li>
</ul>
<p><strong>vector与普通数组区别：</strong></p>
<ul>
<li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li>
</ul>
<p><strong>动态扩展：</strong></p>
<ul>
<li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li>
</ul>
<figure data-type="image" tabindex="4"><img src="assets/clip_image002.jpg" alt="说明: 2015-11-10_151152" loading="lazy"></figure>
<ul>
<li>vector容器的迭代器是支持随机访问的迭代器</li>
</ul>
<h4 id="322-vector构造函数">3.2.2 vector构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>创建vector容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>vector&lt;T&gt; v;</code>               		     //采用模板实现类实现，默认构造函数</li>
<li><code>vector(v.begin(), v.end());</code>       //将v[begin(), end())区间中的元素拷贝给本身。</li>
<li><code>vector(n, elem);</code>                            //构造函数将n个elem拷贝给本身。</li>
<li><code>vector(const vector &amp;vec);</code>         //拷贝构造函数。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void printVector(vector&lt;int&gt;&amp; v) {

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	vector&lt;int&gt; v1; //无参构造
	for (int i = 0; i &lt; 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);

	vector&lt;int&gt; v2(v1.begin(), v1.end());
	printVector(v2);

	vector&lt;int&gt; v3(10, 100);
	printVector(v3);
	
	vector&lt;int&gt; v4(v3);
	printVector(v4);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**vector的多种构造方式没有可比性，灵活使用即可</p>
<h4 id="323-vector赋值操作">3.2.3 vector赋值操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给vector容器进行赋值</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p>
</li>
<li>
<p><code>assign(beg, end);</code>       //将[beg, end)区间中的数据拷贝赋值给本身。</p>
</li>
<li>
<p><code>assign(n, elem);</code>        //将n个elem拷贝赋值给本身。</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void printVector(vector&lt;int&gt;&amp; v) {

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//赋值操作
void test01()
{
	vector&lt;int&gt; v1; //无参构造
	for (int i = 0; i &lt; 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);

	vector&lt;int&gt;v2;
	v2 = v1;
	printVector(v2);

	vector&lt;int&gt;v3;
	v3.assign(v1.begin(), v1.end());
	printVector(v3);

	vector&lt;int&gt;v4;
	v4.assign(10, 100);
	printVector(v4);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p>
<h4 id="324-vector容量和大小">3.2.4  vector容量和大小</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector容器的容量和大小操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>empty();</code>                            //判断容器是否为空</p>
</li>
<li>
<p><code>capacity();</code>                      //容器的容量</p>
</li>
<li>
<p><code>size();</code>                              //返回容器中元素的个数</p>
</li>
<li>
<p><code>resize(int num);</code>             //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​					      //如果容器变短，则末尾超出容器长度的元素被删除。</p>
</li>
<li>
<p><code>resize(int num, elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<p>​				              //如果容器变短，则末尾超出容器长度的元素被删除</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void printVector(vector&lt;int&gt;&amp; v) {

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	vector&lt;int&gt; v1;
	for (int i = 0; i &lt; 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);
	if (v1.empty())
	{
		cout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;v1的容量 = &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;
		cout &lt;&lt; &quot;v1的大小 = &quot; &lt;&lt; v1.size() &lt;&lt; endl;
	}

	//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充
	v1.resize(15,10);
	printVector(v1);

	//resize 重新指定大小 ，若指定的更小，超出部分元素被删除
	v1.resize(5);
	printVector(v1);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p>总结：</p>
<ul>
<li>判断是否为空  --- empty</li>
<li>返回元素个数  --- size</li>
<li>返回容器容量  --- capacity</li>
<li>重新指定大小  ---  resize</li>
</ul>
<h4 id="325-vector插入和删除">3.2.5 vector插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector容器进行插入、删除操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>push_back(ele);</code>                                         //尾部插入元素ele</li>
<li><code>pop_back();</code>                                                //删除最后一个元素</li>
<li><code>insert(const_iterator pos, ele);</code>        //迭代器指向位置pos插入元素ele</li>
<li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li>
<li><code>erase(const_iterator pos);</code>                     //删除迭代器指向的元素</li>
<li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li>
<li><code>clear();</code>                                                        //删除容器中所有元素</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void printVector(vector&lt;int&gt;&amp; v) {

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//插入和删除
void test01()
{
	vector&lt;int&gt; v1;
	//尾插
	v1.push_back(10);
	v1.push_back(20);
	v1.push_back(30);
	v1.push_back(40);
	v1.push_back(50);
	printVector(v1);
	//尾删
	v1.pop_back();
	printVector(v1);
	//插入
	v1.insert(v1.begin(), 100);
	printVector(v1);

	v1.insert(v1.begin(), 2, 1000);
	printVector(v1);

	//删除
	v1.erase(v1.begin());
	printVector(v1);

	//清空
	v1.erase(v1.begin(), v1.end());
	v1.clear();
	printVector(v1);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>尾插  --- push_back</li>
<li>尾删  --- pop_back</li>
<li>插入  --- insert    (位置迭代器)</li>
<li>删除  --- erase  （位置迭代器）</li>
<li>清空  ---  clear</li>
</ul>
<h4 id="326-vector数据存取">3.2.6 vector数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector中的数据的存取操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>at(int idx);</code>     //返回索引idx所指的数据</li>
<li><code>operator[];</code>       //返回索引idx所指的数据</li>
<li><code>front();</code>            //返回容器中第一个数据元素</li>
<li><code>back();</code>              //返回容器中最后一个数据元素</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void test01()
{
	vector&lt;int&gt;v1;
	for (int i = 0; i &lt; 10; i++)
	{
		v1.push_back(i);
	}

	for (int i = 0; i &lt; v1.size(); i++)
	{
		cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	for (int i = 0; i &lt; v1.size(); i++)
	{
		cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl;
	cout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li>
<li>front返回容器第一个元素</li>
<li>back返回容器最后一个元素</li>
</ul>
<h4 id="327-vector互换容器">3.2.7 vector互换容器</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现两个容器内元素进行互换</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>swap(vec);</code>  // 将vec与本身的元素互换</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void printVector(vector&lt;int&gt;&amp; v) {

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	vector&lt;int&gt;v1;
	for (int i = 0; i &lt; 10; i++)
	{
		v1.push_back(i);
	}
	printVector(v1);

	vector&lt;int&gt;v2;
	for (int i = 10; i &gt; 0; i--)
	{
		v2.push_back(i);
	}
	printVector(v2);

	//互换容器
	cout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl;
	v1.swap(v2);
	printVector(v1);
	printVector(v2);
}

void test02()
{
	vector&lt;int&gt; v;
	for (int i = 0; i &lt; 100000; i++) {
		v.push_back(i);
	}

	cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
	cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;

	v.resize(3);

	cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
	cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;

	//收缩内存
	vector&lt;int&gt;(v).swap(v); //匿名对象

	cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
	cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;
}

int main() {

	test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p>
<h4 id="328-vector预留空间">3.2.8 vector预留空间</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>减少vector在动态扩展容量时的扩展次数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;

void test01()
{
	vector&lt;int&gt; v;

	//预留空间
	v.reserve(100000);

	int num = 0;
	int* p = NULL;
	for (int i = 0; i &lt; 100000; i++) {
		v.push_back(i);
		if (p != &amp;v[0]) {
			p = &amp;v[0];
			num++;
		}
	}

	cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;
}

int main() {

	test01();
    
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：如果数据量较大，可以一开始利用reserve预留空间</p>
<h3 id="33-deque容器">3.3 deque容器</h3>
<h4 id="331-deque容器基本概念">3.3.1 deque容器基本概念</h4>
<p><strong>功能：</strong></p>
<ul>
<li>双端数组，可以对头端进行插入删除操作</li>
</ul>
<p><strong>deque与vector区别：</strong></p>
<ul>
<li>vector对于头部的插入删除效率低，数据量越大，效率越低</li>
<li>deque相对而言，对头部的插入删除速度回比vector快</li>
<li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li>
</ul>
<figure data-type="image" tabindex="5"><img src="assets/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101" loading="lazy"></figure>
<p>deque内部工作原理:</p>
<p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p>
<p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p>
<figure data-type="image" tabindex="6"><img src="assets/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341" loading="lazy"></figure>
<ul>
<li>deque容器的迭代器也是支持随机访问的</li>
</ul>
<h4 id="332-deque构造函数">3.3.2 deque构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>deque容器构造</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>deque&lt;T&gt;</code> deqT;                      //默认构造形式</li>
<li><code>deque(beg, end);</code>                  //构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>deque(n, elem);</code>                    //构造函数将n个elem拷贝给本身。</li>
<li><code>deque(const deque &amp;deq);</code>   //拷贝构造函数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}
//deque构造
void test01() {

	deque&lt;int&gt; d1; //无参构造函数
	for (int i = 0; i &lt; 10; i++)
	{
		d1.push_back(i);
	}
	printDeque(d1);
	deque&lt;int&gt; d2(d1.begin(),d1.end());
	printDeque(d2);

	deque&lt;int&gt;d3(10,100);
	printDeque(d3);

	deque&lt;int&gt;d4 = d3;
	printDeque(d4);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**deque容器和vector容器的构造方式几乎一致，灵活使用即可</p>
<h4 id="333-deque赋值操作">3.3.3 deque赋值操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给deque容器进行赋值</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>deque&amp; operator=(const deque &amp;deq);</code>         //重载等号操作符</p>
</li>
<li>
<p><code>assign(beg, end);</code>                                           //将[beg, end)区间中的数据拷贝赋值给本身。</p>
</li>
<li>
<p><code>assign(n, elem);</code>                                             //将n个elem拷贝赋值给本身。</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}
//赋值操作
void test01()
{
	deque&lt;int&gt; d1;
	for (int i = 0; i &lt; 10; i++)
	{
		d1.push_back(i);
	}
	printDeque(d1);

	deque&lt;int&gt;d2;
	d2 = d1;
	printDeque(d2);

	deque&lt;int&gt;d3;
	d3.assign(d1.begin(), d1.end());
	printDeque(d3);

	deque&lt;int&gt;d4;
	d4.assign(10, 100);
	printDeque(d4);

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：deque赋值操作也与vector相同，需熟练掌握</p>
<h4 id="334-deque大小操作">3.3.4 deque大小操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对deque容器的大小进行操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>deque.empty();</code>                       //判断容器是否为空</p>
</li>
<li>
<p><code>deque.size();</code>                         //返回容器中元素的个数</p>
</li>
<li>
<p><code>deque.resize(num);</code>                //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p>
<p>​			                             //如果容器变短，则末尾超出容器长度的元素被删除。</p>
</li>
<li>
<p><code>deque.resize(num, elem);</code>     //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p>
<p>​                                                     //如果容器变短，则末尾超出容器长度的元素被删除。</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}

//大小操作
void test01()
{
	deque&lt;int&gt; d1;
	for (int i = 0; i &lt; 10; i++)
	{
		d1.push_back(i);
	}
	printDeque(d1);

	//判断容器是否为空
	if (d1.empty()) {
		cout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl;
		//统计大小
		cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl;
	}

	//重新指定大小
	d1.resize(15, 1);
	printDeque(d1);

	d1.resize(5);
	printDeque(d1);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>deque没有容量的概念</li>
<li>判断是否为空   --- empty</li>
<li>返回元素个数   --- size</li>
<li>重新指定个数   --- resize</li>
</ul>
<h4 id="335-deque-插入和删除">3.3.5 deque 插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>向deque容器中插入和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<p>两端插入操作：</p>
<ul>
<li><code>push_back(elem);</code>          //在容器尾部添加一个数据</li>
<li><code>push_front(elem);</code>        //在容器头部插入一个数据</li>
<li><code>pop_back();</code>                   //删除容器最后一个数据</li>
<li><code>pop_front();</code>                 //删除容器第一个数据</li>
</ul>
<p>指定位置操作：</p>
<ul>
<li>
<p><code>insert(pos,elem);</code>         //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p>
</li>
<li>
<p><code>insert(pos,n,elem);</code>     //在pos位置插入n个elem数据，无返回值。</p>
</li>
<li>
<p><code>insert(pos,beg,end);</code>    //在pos位置插入[beg,end)区间的数据，无返回值。</p>
</li>
<li>
<p><code>clear();</code>                           //清空容器的所有数据</p>
</li>
<li>
<p><code>erase(beg,end);</code>             //删除[beg,end)区间的数据，返回下一个数据的位置。</p>
</li>
<li>
<p><code>erase(pos);</code>                    //删除pos位置的数据，返回下一个数据的位置。</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}
//两端操作
void test01()
{
	deque&lt;int&gt; d;
	//尾插
	d.push_back(10);
	d.push_back(20);
	//头插
	d.push_front(100);
	d.push_front(200);

	printDeque(d);

	//尾删
	d.pop_back();
	//头删
	d.pop_front();
	printDeque(d);
}

//插入
void test02()
{
	deque&lt;int&gt; d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);
	printDeque(d);

	d.insert(d.begin(), 1000);
	printDeque(d);

	d.insert(d.begin(), 2,10000);
	printDeque(d);

	deque&lt;int&gt;d2;
	d2.push_back(1);
	d2.push_back(2);
	d2.push_back(3);

	d.insert(d.begin(), d2.begin(), d2.end());
	printDeque(d);

}

//删除
void test03()
{
	deque&lt;int&gt; d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);
	printDeque(d);

	d.erase(d.begin());
	printDeque(d);

	d.erase(d.begin(), d.end());
	d.clear();
	printDeque(d);
}

int main() {

	//test01();

	//test02();

    test03();
    
	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p>总结：</p>
<ul>
<li>插入和删除提供的位置是迭代器！</li>
<li>尾插   ---  push_back</li>
<li>尾删   ---  pop_back</li>
<li>头插   ---  push_front</li>
<li>头删   ---  pop_front</li>
</ul>
<h4 id="336-deque-数据存取">3.3.6 deque 数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对deque 中的数据的存取操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>at(int idx);</code>     //返回索引idx所指的数据</li>
<li><code>operator[];</code>      //返回索引idx所指的数据</li>
<li><code>front();</code>            //返回容器中第一个数据元素</li>
<li><code>back();</code>              //返回容器中最后一个数据元素</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}

//数据存取
void test01()
{

	deque&lt;int&gt; d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);

	for (int i = 0; i &lt; d.size(); i++) {
		cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;


	for (int i = 0; i &lt; d.size(); i++) {
		cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl;

	cout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li>
<li>front返回容器第一个元素</li>
<li>back返回容器最后一个元素</li>
</ul>
<h4 id="337-deque-排序">3.3.7  deque 排序</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>利用算法实现对deque容器进行排序</li>
</ul>
<p><strong>算法：</strong></p>
<ul>
<li><code>sort(iterator beg, iterator end)</code>  //对beg和end区间内元素进行排序</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;deque&gt;
#include &lt;algorithm&gt;

void printDeque(const deque&lt;int&gt;&amp; d) 
{
	for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;

	}
	cout &lt;&lt; endl;
}

void test01()
{

	deque&lt;int&gt; d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);

	printDeque(d);
	sort(d.begin(), d.end());
	printDeque(d);

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p>
<h3 id="34-案例-评委打分">3.4 案例-评委打分</h3>
<h4 id="341-案例描述">3.4.1 案例描述</h4>
<p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p>
<h4 id="342-实现步骤">3.4.2 实现步骤</h4>
<ol>
<li>创建五名选手，放到vector中</li>
<li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li>
<li>sort算法对deque容器中分数排序，去除最高和最低分</li>
<li>deque容器遍历一遍，累加总分</li>
<li>获取平均分</li>
</ol>
<p><strong>示例代码：</strong></p>
<pre><code class="language-C++">//选手类
class Person
{
public:
	Person(string name, int score)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Score = score;
	}

	string m_Name; //姓名
	int m_Score;  //平均分
};

void createPerson(vector&lt;Person&gt;&amp;v)
{
	string nameSeed = &quot;ABCDE&quot;;
	for (int i = 0; i &lt; 5; i++)
	{
		string name = &quot;选手&quot;;
		name += nameSeed[i];

		int score = 0;

		Person p(name, score);

		//将创建的person对象 放入到容器中
		v.push_back(p);
	}
}

//打分
void setScore(vector&lt;Person&gt;&amp;v)
{
	for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)
	{
		//将评委的分数 放入到deque容器中
		deque&lt;int&gt;d;
		for (int i = 0; i &lt; 10; i++)
		{
			int score = rand() % 41 + 60;  // 60 ~ 100
			d.push_back(score);
		}

		//cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;
		//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)
		//{
		//	cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;
		//}
		//cout &lt;&lt; endl;

		//排序
		sort(d.begin(), d.end());

		//去除最高和最低分
		d.pop_back();
		d.pop_front();

		//取平均分
		int sum = 0;
		for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)
		{
			sum += *dit; //累加每个评委的分数
		}

		int avg = sum / d.size();

		//将平均分 赋值给选手身上
		it-&gt;m_Score = avg;
	}

}

void showScore(vector&lt;Person&gt;&amp;v)
{
	for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 平均分： &quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl;
	}
}

int main() {

	//随机数种子
	srand((unsigned int)time(NULL));

	//1、创建5名选手
	vector&lt;Person&gt;v;  //存放选手容器
	createPerson(v);

	//测试
	//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)
	//{
	//	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;
	//}

	//2、给5名选手打分
	setScore(v);

	//3、显示最后得分
	showScore(v);

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p>
<h3 id="35-stack容器">3.5 stack容器</h3>
<h4 id="351-stack-基本概念">3.5.1 stack 基本概念</h4>
<p><strong>概念：<strong>stack是一种</strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p>
<figure data-type="image" tabindex="7"><img src="assets/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707" loading="lazy"></figure>
<p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p>
<p>栈中进入数据称为  --- <strong>入栈</strong>  <code>push</code></p>
<p>栈中弹出数据称为  --- <strong>出栈</strong>  <code>pop</code></p>
<p>生活中的栈：</p>
<figure data-type="image" tabindex="8"><img src="assets/clip_image002.png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="assets/clip_image002-1547605111510.jpg" alt="img" loading="lazy"></figure>
<h4 id="352-stack-常用接口">3.5.2 stack 常用接口</h4>
<p>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<ul>
<li><code>stack&lt;T&gt; stk;</code>                                 //stack采用模板类实现， stack对象的默认构造形式</li>
<li><code>stack(const stack &amp;stk);</code>            //拷贝构造函数</li>
</ul>
<p>赋值操作：</p>
<ul>
<li><code>stack&amp; operator=(const stack &amp;stk);</code>           //重载等号操作符</li>
</ul>
<p>数据存取：</p>
<ul>
<li><code>push(elem);</code>      //向栈顶添加元素</li>
<li><code>pop();</code>                //从栈顶移除第一个元素</li>
<li><code>top();</code>                //返回栈顶元素</li>
</ul>
<p>大小操作：</p>
<ul>
<li><code>empty();</code>            //判断堆栈是否为空</li>
<li><code>size();</code>              //返回栈的大小</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;stack&gt;

//栈容器常用接口
void test01()
{
	//创建栈容器 栈容器必须符合先进后出
	stack&lt;int&gt; s;

	//向栈中添加元素，叫做 压栈 入栈
	s.push(10);
	s.push(20);
	s.push(30);

	while (!s.empty()) {
		//输出栈顶元素
		cout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl;
		//弹出栈顶元素
		s.pop();
	}
	cout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>入栈   --- push</li>
<li>出栈   --- pop</li>
<li>返回栈顶   --- top</li>
<li>判断栈是否为空   --- empty</li>
<li>返回栈大小   --- size</li>
</ul>
<h3 id="36-queue-容器">3.6 queue 容器</h3>
<h4 id="361-queue-基本概念">3.6.1 queue 基本概念</h4>
<p><strong>概念：<strong>Queue是一种</strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p>
<figure data-type="image" tabindex="10"><img src="assets/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429" loading="lazy"></figure>
<p>队列容器允许从一端新增元素，从另一端移除元素</p>
<p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p>
<p>队列中进数据称为 --- <strong>入队</strong>    <code>push</code></p>
<p>队列中出数据称为 --- <strong>出队</strong>    <code>pop</code></p>
<p>生活中的队列：</p>
<figure data-type="image" tabindex="11"><img src="assets/1547606785041.png" alt="1547606785041" loading="lazy"></figure>
<h4 id="362-queue-常用接口">3.6.2 queue 常用接口</h4>
<p>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<ul>
<li><code>queue&lt;T&gt; que;</code>                                 //queue采用模板类实现，queue对象的默认构造形式</li>
<li><code>queue(const queue &amp;que);</code>            //拷贝构造函数</li>
</ul>
<p>赋值操作：</p>
<ul>
<li><code>queue&amp; operator=(const queue &amp;que);</code>           //重载等号操作符</li>
</ul>
<p>数据存取：</p>
<ul>
<li><code>push(elem);</code>                             //往队尾添加元素</li>
<li><code>pop();</code>                                      //从队头移除第一个元素</li>
<li><code>back();</code>                                    //返回最后一个元素</li>
<li><code>front();</code>                                  //返回第一个元素</li>
</ul>
<p>大小操作：</p>
<ul>
<li><code>empty();</code>            //判断堆栈是否为空</li>
<li><code>size();</code>              //返回栈的大小</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;queue&gt;
#include &lt;string&gt;
class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}

	string m_Name;
	int m_Age;
};

void test01() {

	//创建队列
	queue&lt;Person&gt; q;

	//准备数据
	Person p1(&quot;唐僧&quot;, 30);
	Person p2(&quot;孙悟空&quot;, 1000);
	Person p3(&quot;猪八戒&quot;, 900);
	Person p4(&quot;沙僧&quot;, 800);

	//向队列中添加元素  入队操作
	q.push(p1);
	q.push(p2);
	q.push(p3);
	q.push(p4);

	//队列不提供迭代器，更不支持随机访问	
	while (!q.empty()) {
		//输出队头元素
		cout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name 
              &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl;
        
		cout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name  
              &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl;
        
		cout &lt;&lt; endl;
		//弹出队头元素
		q.pop();
	}

	cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>入队   --- push</li>
<li>出队   --- pop</li>
<li>返回队头元素   --- front</li>
<li>返回队尾元素   --- back</li>
<li>判断队是否为空   --- empty</li>
<li>返回队列大小   --- size</li>
</ul>
<h3 id="37-list容器">3.7 list容器</h3>
<h4 id="371-list基本概念">3.7.1 list基本概念</h4>
<p>**功能：**将数据进行链式存储</p>
<p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p>
<p>链表的组成：链表由一系列<strong>结点</strong>组成</p>
<p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p>
<p>STL中的链表是一个双向循环链表</p>
<figure data-type="image" tabindex="12"><img src="assets/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145" loading="lazy"></figure>
<p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p>
<p>list的优点：</p>
<ul>
<li>采用动态存储分配，不会造成内存浪费和溢出</li>
<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li>
</ul>
<p>list的缺点：</p>
<ul>
<li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li>
</ul>
<p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p>
<p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p>
<h4 id="372-list构造函数">3.7.2  list构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>创建list容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>list&lt;T&gt; lst;</code>                               //list采用采用模板类实现,对象的默认构造形式：</li>
<li><code>list(beg,end);</code>                           //构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>list(n,elem);</code>                             //构造函数将n个elem拷贝给本身。</li>
<li><code>list(const list &amp;lst);</code>            //拷贝构造函数。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;

void printList(const list&lt;int&gt;&amp; L) {

	for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	list&lt;int&gt;L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	printList(L1);

	list&lt;int&gt;L2(L1.begin(),L1.end());
	printList(L2);

	list&lt;int&gt;L3(L2);
	printList(L3);

	list&lt;int&gt;L4(10, 1000);
	printList(L4);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p>
<h4 id="373-list-赋值和交换">3.7.3 list 赋值和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给list容器进行赋值，以及交换list容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>assign(beg, end);</code>            //将[beg, end)区间中的数据拷贝赋值给本身。</li>
<li><code>assign(n, elem);</code>              //将n个elem拷贝赋值给本身。</li>
<li><code>list&amp; operator=(const list &amp;lst);</code>         //重载等号操作符</li>
<li><code>swap(lst);</code>                         //将lst与本身的元素互换。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;

void printList(const list&lt;int&gt;&amp; L) {

	for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//赋值和交换
void test01()
{
	list&lt;int&gt;L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	printList(L1);

	//赋值
	list&lt;int&gt;L2;
	L2 = L1;
	printList(L2);

	list&lt;int&gt;L3;
	L3.assign(L2.begin(), L2.end());
	printList(L3);

	list&lt;int&gt;L4;
	L4.assign(10, 100);
	printList(L4);

}

//交换
void test02()
{

	list&lt;int&gt;L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	list&lt;int&gt;L2;
	L2.assign(10, 100);

	cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;
	printList(L1);
	printList(L2);

	cout &lt;&lt; endl;

	L1.swap(L2);

	cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;
	printList(L1);
	printList(L2);

}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：list赋值和交换操作能够灵活运用即可</p>
<h4 id="374-list-大小操作">3.7.4 list 大小操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器的大小进行操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>size();</code>                             //返回容器中元素的个数</p>
</li>
<li>
<p><code>empty();</code>                           //判断容器是否为空</p>
</li>
<li>
<p><code>resize(num);</code>                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​					    //如果容器变短，则末尾超出容器长度的元素被删除。</p>
</li>
<li>
<p><code>resize(num, elem);</code>       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<pre><code>  				    //如果容器变短，则末尾超出容器长度的元素被删除。
</code></pre>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;

void printList(const list&lt;int&gt;&amp; L) {

	for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//大小操作
void test01()
{
	list&lt;int&gt;L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	if (L1.empty())
	{
		cout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl;
	}

	//重新指定大小
	L1.resize(10);
	printList(L1);

	L1.resize(2);
	printList(L1);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>判断是否为空   --- empty</li>
<li>返回元素个数   --- size</li>
<li>重新指定个数   --- resize</li>
</ul>
<h4 id="375-list-插入和删除">3.7.5 list 插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器进行数据的插入和删除</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>push_back(elem);//在容器尾部加入一个元素</li>
<li>pop_back();//删除容器中最后一个元素</li>
<li>push_front(elem);//在容器开头插入一个元素</li>
<li>pop_front();//从容器开头移除第一个元素</li>
<li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li>
<li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li>
<li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li>
<li>clear();//移除容器的所有数据</li>
<li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li>
<li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li>
<li>remove(elem);//删除容器中所有与elem值匹配的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;

void printList(const list&lt;int&gt;&amp; L) {

	for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//插入和删除
void test01()
{
	list&lt;int&gt; L;
	//尾插
	L.push_back(10);
	L.push_back(20);
	L.push_back(30);
	//头插
	L.push_front(100);
	L.push_front(200);
	L.push_front(300);

	printList(L);

	//尾删
	L.pop_back();
	printList(L);

	//头删
	L.pop_front();
	printList(L);

	//插入
	list&lt;int&gt;::iterator it = L.begin();
	L.insert(++it, 1000);
	printList(L);

	//删除
	it = L.begin();
	L.erase(++it);
	printList(L);

	//移除
	L.push_back(10000);
	L.push_back(10000);
	L.push_back(10000);
	printList(L);
	L.remove(10000);
	printList(L);
    
    //清空
	L.clear();
	printList(L);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>尾插   --- push_back</li>
<li>尾删   --- pop_back</li>
<li>头插   --- push_front</li>
<li>头删   --- pop_front</li>
<li>插入   --- insert</li>
<li>删除   --- erase</li>
<li>移除   --- remove</li>
<li>清空   --- clear</li>
</ul>
<h4 id="376-list-数据存取">3.7.6 list 数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器中数据进行存取</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>front();</code>        //返回第一个元素。</li>
<li><code>back();</code>         //返回最后一个元素。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;

//数据存取
void test01()
{
	list&lt;int&gt;L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	
	//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据
	//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据
	cout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl;
	cout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl;

	//list容器的迭代器是双向迭代器，不支持随机访问
	list&lt;int&gt;::iterator it = L1.begin();
	//it = it + 1;//错误，不可以跳跃访问，即使是+1
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p>总结：</p>
<ul>
<li>list容器中不可以通过[]或者at方式访问数据</li>
<li>返回第一个元素   --- front</li>
<li>返回最后一个元素   --- back</li>
</ul>
<h4 id="377-list-反转和排序">3.7.7 list 反转和排序</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器中的元素反转，以及将容器中的数据进行排序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>reverse();</code>   //反转链表</li>
<li><code>sort();</code>        //链表排序</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">void printList(const list&lt;int&gt;&amp; L) {

	for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

bool myCompare(int val1 , int val2)
{
	return val1 &gt; val2;
}

//反转和排序
void test01()
{
	list&lt;int&gt; L;
	L.push_back(90);
	L.push_back(30);
	L.push_back(20);
	L.push_back(70);
	printList(L);

	//反转容器的元素
	L.reverse();
	printList(L);

	//排序
	L.sort(); //默认的排序规则 从小到大
	printList(L);

	L.sort(myCompare); //指定规则，从大到小
	printList(L);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>反转   --- reverse</li>
<li>排序   --- sort （成员函数）</li>
</ul>
<h4 id="378-排序案例">3.7.8 排序案例</h4>
<p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p>
<p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;list&gt;
#include &lt;string&gt;
class Person {
public:
	Person(string name, int age , int height) {
		m_Name = name;
		m_Age = age;
		m_Height = height;
	}

public:
	string m_Name;  //姓名
	int m_Age;      //年龄
	int m_Height;   //身高
};


bool ComparePerson(Person&amp; p1, Person&amp; p2) {

	if (p1.m_Age == p2.m_Age) {
		return p1.m_Height  &gt; p2.m_Height;
	}
	else
	{
		return  p1.m_Age &lt; p2.m_Age;
	}

}

void test01() {

	list&lt;Person&gt; L;

	Person p1(&quot;刘备&quot;, 35 , 175);
	Person p2(&quot;曹操&quot;, 45 , 180);
	Person p3(&quot;孙权&quot;, 40 , 170);
	Person p4(&quot;赵云&quot;, 25 , 190);
	Person p5(&quot;张飞&quot;, 35 , 160);
	Person p6(&quot;关羽&quot;, 35 , 200);

	L.push_back(p1);
	L.push_back(p2);
	L.push_back(p3);
	L.push_back(p4);
	L.push_back(p5);
	L.push_back(p6);

	for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age 
              &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;
	}

	cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl;
	L.sort(ComparePerson); //排序

	for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age 
              &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;
	}
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>
<p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p>
</li>
<li>
<p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p>
</li>
</ul>
<h3 id="38-set-multiset-容器">3.8 set/ multiset 容器</h3>
<h4 id="381-set基本概念">3.8.1 set基本概念</h4>
<p><strong>简介：</strong></p>
<ul>
<li>所有元素都会在插入时自动被排序</li>
</ul>
<p><strong>本质：</strong></p>
<ul>
<li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li>
</ul>
<p><strong>set和multiset区别</strong>：</p>
<ul>
<li>set不允许容器中有重复的元素</li>
<li>multiset允许容器中有重复的元素</li>
</ul>
<h4 id="382-set构造和赋值">3.8.2 set构造和赋值</h4>
<p>功能描述：创建set容器以及赋值</p>
<p>构造：</p>
<ul>
<li><code>set&lt;T&gt; st;</code>                        //默认构造函数：</li>
<li><code>set(const set &amp;st);</code>       //拷贝构造函数</li>
</ul>
<p>赋值：</p>
<ul>
<li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;set&gt;

void printSet(set&lt;int&gt; &amp; s)
{
	for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//构造和赋值
void test01()
{
	set&lt;int&gt; s1;

	s1.insert(10);
	s1.insert(30);
	s1.insert(20);
	s1.insert(40);
	printSet(s1);

	//拷贝构造
	set&lt;int&gt;s2(s1);
	printSet(s2);

	//赋值
	set&lt;int&gt;s3;
	s3 = s2;
	printSet(s3);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>set容器插入数据时用insert</li>
<li>set容器插入数据的数据会自动排序</li>
</ul>
<h4 id="383-set大小和交换">3.8.3 set大小和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计set容器大小以及交换set容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>size();</code>          //返回容器中元素的数目</li>
<li><code>empty();</code>        //判断容器是否为空</li>
<li><code>swap(st);</code>      //交换两个集合容器</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;set&gt;

void printSet(set&lt;int&gt; &amp; s)
{
	for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//大小
void test01()
{

	set&lt;int&gt; s1;
	
	s1.insert(10);
	s1.insert(30);
	s1.insert(20);
	s1.insert(40);

	if (s1.empty())
	{
		cout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl;
	}

}

//交换
void test02()
{
	set&lt;int&gt; s1;

	s1.insert(10);
	s1.insert(30);
	s1.insert(20);
	s1.insert(40);

	set&lt;int&gt; s2;

	s2.insert(100);
	s2.insert(300);
	s2.insert(200);
	s2.insert(400);

	cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;
	printSet(s1);
	printSet(s2);
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;
	s1.swap(s2);
	printSet(s1);
	printSet(s2);
}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>统计大小   --- size</li>
<li>判断是否为空   --- empty</li>
<li>交换容器   --- swap</li>
</ul>
<h4 id="384-set插入和删除">3.8.4 set插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>set容器进行插入数据和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>insert(elem);</code>           //在容器中插入元素。</li>
<li><code>clear();</code>                    //清除所有元素</li>
<li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>
<li><code>erase(elem);</code>            //删除容器中值为elem的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;set&gt;

void printSet(set&lt;int&gt; &amp; s)
{
	for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

//插入和删除
void test01()
{
	set&lt;int&gt; s1;
	//插入
	s1.insert(10);
	s1.insert(30);
	s1.insert(20);
	s1.insert(40);
	printSet(s1);

	//删除
	s1.erase(s1.begin());
	printSet(s1);

	s1.erase(30);
	printSet(s1);

	//清空
	//s1.erase(s1.begin(), s1.end());
	s1.clear();
	printSet(s1);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>插入   --- insert</li>
<li>删除   --- erase</li>
<li>清空   --- clear</li>
</ul>
<h4 id="385-set查找和统计">3.8.5 set查找和统计</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对set容器进行查找数据以及统计数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code>                //统计key的元素个数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;set&gt;

//查找和统计
void test01()
{
	set&lt;int&gt; s1;
	//插入
	s1.insert(10);
	s1.insert(30);
	s1.insert(20);
	s1.insert(40);
	
	//查找
	set&lt;int&gt;::iterator pos = s1.find(30);

	if (pos != s1.end())
	{
		cout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;
	}

	//统计
	int num = s1.count(30);
	cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>查找   ---  find    （返回的是迭代器）</li>
<li>统计   ---  count  （对于set，结果为0或者1）</li>
</ul>
<h4 id="386-set和multiset区别">3.8.6 set和multiset区别</h4>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握set和multiset的区别</li>
</ul>
<p><strong>区别：</strong></p>
<ul>
<li>set不可以插入重复数据，而multiset可以</li>
<li>set插入数据的同时会返回插入结果，表示插入是否成功</li>
<li>multiset不会检测数据，因此可以插入重复数据</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;set&gt;

//set和multiset区别
void test01()
{
	set&lt;int&gt; s;
	pair&lt;set&lt;int&gt;::iterator, bool&gt;  ret = s.insert(10);
	if (ret.second) {
		cout &lt;&lt; &quot;第一次插入成功!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;第一次插入失败!&quot; &lt;&lt; endl;
	}

	ret = s.insert(10);
	if (ret.second) {
		cout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl;
	}
    
	//multiset
	multiset&lt;int&gt; ms;
	ms.insert(10);
	ms.insert(10);

	for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>如果不允许插入重复数据可以利用set</li>
<li>如果需要插入重复数据利用multiset</li>
</ul>
<h4 id="387-pair对组创建">3.8.7 pair对组创建</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>成对出现的数据，利用对组可以返回两个数据</li>
</ul>
<p><strong>两种创建方式：</strong></p>
<ul>
<li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li>
<li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;

//对组创建
void test01()
{
	pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20);
	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt;  p.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.second &lt;&lt; endl;

	pair&lt;string, int&gt; p2 = make_pair(&quot;Jerry&quot;, 10);
	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>两种方式都可以创建对组，记住一种即可</p>
<h4 id="388-set容器排序">3.8.8 set容器排序</h4>
<p>学习目标：</p>
<ul>
<li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li>
</ul>
<p>主要技术点：</p>
<ul>
<li>利用仿函数，可以改变排序规则</li>
</ul>
<p><strong>示例一</strong>   set存放内置数据类型</p>
<pre><code class="language-C++">#include &lt;set&gt;

class MyCompare 
{
public:
	bool operator()(int v1, int v2) {
		return v1 &gt; v2;
	}
};
void test01() 
{    
	set&lt;int&gt; s1;
	s1.insert(10);
	s1.insert(40);
	s1.insert(20);
	s1.insert(30);
	s1.insert(50);

	//默认从小到大
	for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	//指定排序规则
	set&lt;int,MyCompare&gt; s2;
	s2.insert(10);
	s2.insert(40);
	s2.insert(20);
	s2.insert(30);
	s2.insert(50);

	for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：利用仿函数可以指定set容器的排序规则</p>
<p><strong>示例二</strong> set存放自定义数据类型</p>
<pre><code class="language-C++">#include &lt;set&gt;
#include &lt;string&gt;

class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}

	string m_Name;
	int m_Age;

};
class comparePerson
{
public:
	bool operator()(const Person&amp; p1, const Person &amp;p2)
	{
		//按照年龄进行排序  降序
		return p1.m_Age &gt; p2.m_Age;
	}
};

void test01()
{
	set&lt;Person, comparePerson&gt; s;

	Person p1(&quot;刘备&quot;, 23);
	Person p2(&quot;关羽&quot;, 27);
	Person p3(&quot;张飞&quot;, 25);
	Person p4(&quot;赵云&quot;, 21);

	s.insert(p1);
	s.insert(p2);
	s.insert(p3);
	s.insert(p4);

	for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
	}
}
int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p>
<h3 id="39-map-multimap容器">3.9 map/ multimap容器</h3>
<h4 id="391-map基本概念">3.9.1 map基本概念</h4>
<p><strong>简介：</strong></p>
<ul>
<li>map中所有元素都是pair</li>
<li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li>
<li>所有元素都会根据元素的键值自动排序</li>
</ul>
<p><strong>本质：</strong></p>
<ul>
<li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>可以根据key值快速找到value值</li>
</ul>
<p>map和multimap<strong>区别</strong>：</p>
<ul>
<li>map不允许容器中有重复key值元素</li>
<li>multimap允许容器中有重复key值元素</li>
</ul>
<h4 id="392-map构造和赋值">3.9.2  map构造和赋值</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对map容器进行构造和赋值操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<p><strong>构造：</strong></p>
<ul>
<li><code>map&lt;T1, T2&gt; mp;</code>                     //map默认构造函数:</li>
<li><code>map(const map &amp;mp);</code>             //拷贝构造函数</li>
</ul>
<p><strong>赋值：</strong></p>
<ul>
<li><code>map&amp; operator=(const map &amp;mp);</code>    //重载等号操作符</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;map&gt;

void printMap(map&lt;int,int&gt;&amp;m)
{
	for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)
	{
		cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	map&lt;int,int&gt;m; //默认构造
	m.insert(pair&lt;int, int&gt;(1, 10));
	m.insert(pair&lt;int, int&gt;(2, 20));
	m.insert(pair&lt;int, int&gt;(3, 30));
	printMap(m);

	map&lt;int, int&gt;m2(m); //拷贝构造
	printMap(m2);

	map&lt;int, int&gt;m3;
	m3 = m2; //赋值
	printMap(m3);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p>
<h4 id="393-map大小和交换">3.9.3 map大小和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计map容器大小以及交换map容器</li>
</ul>
<p>函数原型：</p>
<ul>
<li><code>size();</code>          //返回容器中元素的数目</li>
<li><code>empty();</code>        //判断容器是否为空</li>
<li><code>swap(st);</code>      //交换两个集合容器</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;map&gt;

void printMap(map&lt;int,int&gt;&amp;m)
{
	for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)
	{
		cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	map&lt;int, int&gt;m;
	m.insert(pair&lt;int, int&gt;(1, 10));
	m.insert(pair&lt;int, int&gt;(2, 20));
	m.insert(pair&lt;int, int&gt;(3, 30));

	if (m.empty())
	{
		cout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl;
	}
}


//交换
void test02()
{
	map&lt;int, int&gt;m;
	m.insert(pair&lt;int, int&gt;(1, 10));
	m.insert(pair&lt;int, int&gt;(2, 20));
	m.insert(pair&lt;int, int&gt;(3, 30));

	map&lt;int, int&gt;m2;
	m2.insert(pair&lt;int, int&gt;(4, 100));
	m2.insert(pair&lt;int, int&gt;(5, 200));
	m2.insert(pair&lt;int, int&gt;(6, 300));

	cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;
	printMap(m);
	printMap(m2);

	cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;
	m.swap(m2);
	printMap(m);
	printMap(m2);
}

int main() {

	test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>统计大小   --- size</li>
<li>判断是否为空   --- empty</li>
<li>交换容器   --- swap</li>
</ul>
<h4 id="394-map插入和删除">3.9.4 map插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>map容器进行插入数据和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>insert(elem);</code>           //在容器中插入元素。</li>
<li><code>clear();</code>                    //清除所有元素</li>
<li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>
<li><code>erase(key);</code>            //删除容器中值为key的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;map&gt;

void printMap(map&lt;int,int&gt;&amp;m)
{
	for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)
	{
		cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
	}
	cout &lt;&lt; endl;
}

void test01()
{
	//插入
	map&lt;int, int&gt; m;
	//第一种插入方式
	m.insert(pair&lt;int, int&gt;(1, 10));
	//第二种插入方式
	m.insert(make_pair(2, 20));
	//第三种插入方式
	m.insert(map&lt;int, int&gt;::value_type(3, 30));
	//第四种插入方式
	m[4] = 40; 
	printMap(m);

	//删除
	m.erase(m.begin());
	printMap(m);

	m.erase(3);
	printMap(m);

	//清空
	m.erase(m.begin(),m.end());
	m.clear();
	printMap(m);
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>map插入方式很多，记住其一即可</li>
</ul>
<ul>
<li>插入   --- insert</li>
<li>删除   --- erase</li>
<li>清空   --- clear</li>
</ul>
<h4 id="395-map查找和统计">3.9.5 map查找和统计</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对map容器进行查找数据以及统计数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code>                //统计key的元素个数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;map&gt;

//查找和统计
void test01()
{
	map&lt;int, int&gt;m; 
	m.insert(pair&lt;int, int&gt;(1, 10));
	m.insert(pair&lt;int, int&gt;(2, 20));
	m.insert(pair&lt;int, int&gt;(3, 30));

	//查找
	map&lt;int, int&gt;::iterator pos = m.find(3);

	if (pos != m.end())
	{
		cout &lt;&lt; &quot;找到了元素 key = &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value = &quot; &lt;&lt; (*pos).second &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;
	}

	//统计
	int num = m.count(3);
	cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>查找   ---  find    （返回的是迭代器）</li>
<li>统计   ---  count  （对于map，结果为0或者1）</li>
</ul>
<h4 id="396-map容器排序">3.9.6 map容器排序</h4>
<p><strong>学习目标：</strong></p>
<ul>
<li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li>
</ul>
<p><strong>主要技术点:</strong></p>
<ul>
<li>利用仿函数，可以改变排序规则</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;map&gt;

class MyCompare {
public:
	bool operator()(int v1, int v2) {
		return v1 &gt; v2;
	}
};

void test01() 
{
	//默认从小到大排序
	//利用仿函数实现从大到小排序
	map&lt;int, int, MyCompare&gt; m;

	m.insert(make_pair(1, 10));
	m.insert(make_pair(2, 20));
	m.insert(make_pair(3, 30));
	m.insert(make_pair(4, 40));
	m.insert(make_pair(5, 50));

	for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) {
		cout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
	}
}
int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>利用仿函数可以指定map容器的排序规则</li>
<li>对于自定义数据类型，map必须要指定排序规则,同set容器</li>
</ul>
<h3 id="310-案例-员工分组">3.10 案例-员工分组</h3>
<h4 id="3101-案例描述">3.10.1 案例描述</h4>
<ul>
<li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li>
<li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li>
<li>随机给10名员工分配部门和工资</li>
<li>通过multimap进行信息的插入  key(部门编号) value(员工)</li>
<li>分部门显示员工信息</li>
</ul>
<h4 id="3102-实现步骤">3.10.2 实现步骤</h4>
<ol>
<li>创建10名员工，放到vector中</li>
<li>遍历vector容器，取出每个员工，进行随机分组</li>
<li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li>
<li>分部门显示员工信息</li>
</ol>
<p><strong>案例代码：</strong></p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;ctime&gt;

/*
- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作
- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发
- 随机给10名员工分配部门和工资
- 通过multimap进行信息的插入  key(部门编号) value(员工)
- 分部门显示员工信息
*/

#define CEHUA  0
#define MEISHU 1
#define YANFA  2

class Worker
{
public:
	string m_Name;
	int m_Salary;
};

void createWorker(vector&lt;Worker&gt;&amp;v)
{
	string nameSeed = &quot;ABCDEFGHIJ&quot;;
	for (int i = 0; i &lt; 10; i++)
	{
		Worker worker;
		worker.m_Name = &quot;员工&quot;;
		worker.m_Name += nameSeed[i];

		worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999
		//将员工放入到容器中
		v.push_back(worker);
	}
}

//员工分组
void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m)
{
	for (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)
	{
		//产生随机部门编号
		int deptId = rand() % 3; // 0 1 2 

		//将员工插入到分组中
		//key部门编号，value具体员工
		m.insert(make_pair(deptId, *it));
	}
}

void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m)
{
	// 0  A  B  C   1  D  E   2  F G ...
	cout &lt;&lt; &quot;策划部门：&quot; &lt;&lt; endl;

	multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA);
	int count = m.count(CEHUA); // 统计具体人数
	int index = 0;
	for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
	}

	cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;美术部门： &quot; &lt;&lt; endl;
	pos = m.find(MEISHU);
	count = m.count(MEISHU); // 统计具体人数
	index = 0;
	for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
	}

	cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;研发部门： &quot; &lt;&lt; endl;
	pos = m.find(YANFA);
	count = m.count(YANFA); // 统计具体人数
	index = 0;
	for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
	}

}

int main() {

	srand((unsigned int)time(NULL));

	//1、创建员工
	vector&lt;Worker&gt;vWorker;
	createWorker(vWorker);

	//2、员工分组
	multimap&lt;int, Worker&gt;mWorker;
	setGroup(vWorker, mWorker);


	//3、分组显示员工
	showWorkerByGourp(mWorker);

	////测试
	//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)
	//{
	//	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;
	//}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>当数据以键值对形式存在，可以考虑用map 或 multimap</li>
</ul>
<h2 id="4-stl-函数对象">4 STL- 函数对象</h2>
<h3 id="41-函数对象">4.1 函数对象</h3>
<h4 id="411-函数对象概念">4.1.1 函数对象概念</h4>
<p><strong>概念：</strong></p>
<ul>
<li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li>
<li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li>
</ul>
<p><strong>本质：</strong></p>
<p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p>
<h4 id="412-函数对象使用">4.1.2  函数对象使用</h4>
<p><strong>特点：</strong></p>
<ul>
<li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li>
<li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li>
<li>函数对象可以作为参数传递</li>
</ul>
<p><strong>示例:</strong></p>
<pre><code class="language-C++">#include &lt;string&gt;

//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值
class MyAdd
{
public :
	int operator()(int v1,int v2)
	{
		return v1 + v2;
	}
};

void test01()
{
	MyAdd myAdd;
	cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;
}

//2、函数对象可以有自己的状态
class MyPrint
{
public:
	MyPrint()
	{
		count = 0;
	}
	void operator()(string test)
	{
		cout &lt;&lt; test &lt;&lt; endl;
		count++; //统计使用次数
	}

	int count; //内部自己的状态
};
void test02()
{
	MyPrint myPrint;
	myPrint(&quot;hello world&quot;);
	myPrint(&quot;hello world&quot;);
	myPrint(&quot;hello world&quot;);
	cout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;
}

//3、函数对象可以作为参数传递
void doPrint(MyPrint &amp;mp , string test)
{
	mp(test);
}

void test03()
{
	MyPrint myPrint;
	doPrint(myPrint, &quot;Hello C++&quot;);
}

int main() {

	//test01();
	//test02();
	test03();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>仿函数写法非常灵活，可以作为参数进行传递。</li>
</ul>
<h3 id="42-谓词">4.2  谓词</h3>
<h4 id="421-谓词概念">4.2.1 谓词概念</h4>
<p><strong>概念：</strong></p>
<ul>
<li>返回bool类型的仿函数称为<strong>谓词</strong></li>
<li>如果operator()接受一个参数，那么叫做一元谓词</li>
<li>如果operator()接受两个参数，那么叫做二元谓词</li>
</ul>
<h4 id="422-一元谓词">4.2.2 一元谓词</h4>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;

//1.一元谓词
struct GreaterFive{
	bool operator()(int val) {
		return val &gt; 5;
	}
};

void test01() {

	vector&lt;int&gt; v;
	for (int i = 0; i &lt; 10; i++)
	{
		v.push_back(i);
	}

	vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());
	if (it == v.end()) {
		cout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;
	}

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：参数只有一个的谓词，称为一元谓词</p>
<h4 id="423-二元谓词">4.2.3 二元谓词</h4>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;
//二元谓词
class MyCompare
{
public:
	bool operator()(int num1, int num2)
	{
		return num1 &gt; num2;
	}
};

void test01()
{
	vector&lt;int&gt; v;
	v.push_back(10);
	v.push_back(40);
	v.push_back(20);
	v.push_back(30);
	v.push_back(50);

	//默认从小到大
	sort(v.begin(), v.end());
	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
	cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;

	//使用函数对象改变算法策略，排序从大到小
	sort(v.begin(), v.end(), MyCompare());
	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：参数只有两个的谓词，称为二元谓词</p>
<h3 id="43-内建函数对象">4.3 内建函数对象</h3>
<h4 id="431-内建函数对象意义">4.3.1 内建函数对象意义</h4>
<p><strong>概念：</strong></p>
<ul>
<li>STL内建了一些函数对象</li>
</ul>
<p><strong>分类:</strong></p>
<ul>
<li>
<p>算术仿函数</p>
</li>
<li>
<p>关系仿函数</p>
</li>
<li>
<p>逻辑仿函数</p>
</li>
</ul>
<p><strong>用法：</strong></p>
<ul>
<li>这些仿函数所产生的对象，用法和一般函数完全相同</li>
<li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li>
</ul>
<h4 id="432-算术仿函数">4.3.2 算术仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现四则运算</li>
<li>其中negate是一元运算，其他都是二元运算</li>
</ul>
<p><strong>仿函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                //加法仿函数</li>
<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              //减法仿函数</li>
<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    //乘法仿函数</li>
<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         //除法仿函数</li>
<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         //取模仿函数</li>
<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           //取反仿函数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;functional&gt;
//negate
void test01()
{
	negate&lt;int&gt; n;
	cout &lt;&lt; n(50) &lt;&lt; endl;
}

//plus
void test02()
{
	plus&lt;int&gt; p;
	cout &lt;&lt; p(10, 20) &lt;&lt; endl;
}

int main() {

	test01();
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p>
<h4 id="433-关系仿函数">4.3.3 关系仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现关系对比</li>
</ul>
<p><strong>仿函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    //等于</li>
<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            //不等于</li>
<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      //大于</li>
<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          //大于等于</li>
<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           //小于</li>
<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               //小于等于</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

class MyCompare
{
public:
	bool operator()(int v1,int v2)
	{
		return v1 &gt; v2;
	}
};
void test01()
{
	vector&lt;int&gt; v;

	v.push_back(10);
	v.push_back(30);
	v.push_back(50);
	v.push_back(40);
	v.push_back(20);

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	//自己实现仿函数
	//sort(v.begin(), v.end(), MyCompare());
	//STL内建仿函数  大于仿函数
	sort(v.begin(), v.end(), greater&lt;int&gt;());

	for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p>
<h4 id="434-逻辑仿函数">4.3.4 逻辑仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现逻辑运算</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              //逻辑与</li>
<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                //逻辑或</li>
<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              //逻辑非</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;functional&gt;
#include &lt;algorithm&gt;
void test01()
{
	vector&lt;bool&gt; v;
	v.push_back(true);
	v.push_back(false);
	v.push_back(true);
	v.push_back(false);

	for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;

	//逻辑非  将v容器搬运到v2中，并执行逻辑非运算
	vector&lt;bool&gt; v2;
	v2.resize(v.size());
	transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());
	for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++)
	{
		cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
	}
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：逻辑仿函数实际应用较少，了解即可</p>
<h2 id="5-stl-常用算法">5 STL- 常用算法</h2>
<p><strong>概述</strong>:</p>
<ul>
<li>
<p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p>
</li>
<li>
<p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p>
</li>
<li>
<p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p>
</li>
<li>
<p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p>
</li>
</ul>
<h3 id="51-常用遍历算法">5.1 常用遍历算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的遍历算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>for_each</code>     //遍历容器</li>
<li><code>transform</code>   //搬运容器到另一个容器中</li>
</ul>
<h4 id="511-for_each">5.1.1 for_each</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现遍历容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>for_each(iterator beg, iterator end, _func);</code></p>
<p>// 遍历算法 遍历容器元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _func 函数或者函数对象</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

//普通函数
void print01(int val) 
{
	cout &lt;&lt; val &lt;&lt; &quot; &quot;;
}
//函数对象
class print02 
{
 public:
	void operator()(int val) 
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

//for_each算法基本用法
void test01() {

	vector&lt;int&gt; v;
	for (int i = 0; i &lt; 10; i++) 
	{
		v.push_back(i);
	}

	//遍历算法
	for_each(v.begin(), v.end(), print01);
	cout &lt;&lt; endl;

	for_each(v.begin(), v.end(), print02());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**for_each在实际开发中是最常用遍历算法，需要熟练掌握</p>
<h4 id="512-transform">5.1.2 transform</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>搬运容器到另一个容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>
</ul>
<p>//beg1 源容器开始迭代器</p>
<p>//end1 源容器结束迭代器</p>
<p>//beg2 目标容器开始迭代器</p>
<p>//_func 函数或者函数对象</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include&lt;vector&gt;
#include&lt;algorithm&gt;

//常用遍历算法  搬运 transform

class TransForm
{
public:
	int operator()(int val)
	{
		return val;
	}

};

class MyPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt;v;
	for (int i = 0; i &lt; 10; i++)
	{
		v.push_back(i);
	}

	vector&lt;int&gt;vTarget; //目标容器

	vTarget.resize(v.size()); // 目标容器需要提前开辟空间

	transform(v.begin(), v.end(), vTarget.begin(), TransForm());

	for_each(vTarget.begin(), vTarget.end(), MyPrint());
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>
<h3 id="52-常用查找算法">5.2 常用查找算法</h3>
<p>学习目标：</p>
<ul>
<li>掌握常用的查找算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>find</code>                     //查找元素</li>
<li><code>find_if</code>               //按条件查找元素</li>
<li><code>adjacent_find</code>    //查找相邻重复元素</li>
<li><code>binary_search</code>    //二分查找法</li>
<li><code>count</code>                   //统计元素个数</li>
<li><code>count_if</code>             //按条件统计元素个数</li>
</ul>
<h4 id="521-find">5.2.1 find</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>find(iterator beg, iterator end, value);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
void test01() {

	vector&lt;int&gt; v;
	for (int i = 0; i &lt; 10; i++) {
		v.push_back(i + 1);
	}
	//查找容器中是否有 5 这个元素
	vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);
	if (it == v.end()) 
	{
		cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
	}
	else 
	{
		cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;
	}
}

class Person {
public:
	Person(string name, int age) 
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}
	//重载==
	bool operator==(const Person&amp; p) 
	{
		if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) 
		{
			return true;
		}
		return false;
	}

public:
	string m_Name;
	int m_Age;
};

void test02() {

	vector&lt;Person&gt; v;

	//创建数据
	Person p1(&quot;aaa&quot;, 10);
	Person p2(&quot;bbb&quot;, 20);
	Person p3(&quot;ccc&quot;, 30);
	Person p4(&quot;ddd&quot;, 40);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);

	vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);
	if (it == v.end()) 
	{
		cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
	}
	else 
	{
		cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
	}
}
</code></pre>
<p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p>
<h4 id="522-find_if">5.2.2 find_if</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>按条件查找元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>find_if(iterator beg, iterator end, _Pred);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

//内置数据类型
class GreaterFive
{
public:
	bool operator()(int val)
	{
		return val &gt; 5;
	}
};

void test01() {

	vector&lt;int&gt; v;
	for (int i = 0; i &lt; 10; i++) {
		v.push_back(i + 1);
	}

	vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());
	if (it == v.end()) {
		cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl;
	}
}

//自定义数据类型
class Person {
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}
public:
	string m_Name;
	int m_Age;
};

class Greater20
{
public:
	bool operator()(Person &amp;p)
	{
		return p.m_Age &gt; 20;
	}

};

void test02() {

	vector&lt;Person&gt; v;

	//创建数据
	Person p1(&quot;aaa&quot;, 10);
	Person p2(&quot;bbb&quot;, 20);
	Person p3(&quot;ccc&quot;, 30);
	Person p4(&quot;ddd&quot;, 40);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);

	vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());
	if (it == v.end())
	{
		cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
	}
}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>
<h4 id="523-adjacent_find">5.2.3 adjacent_find</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找相邻重复元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>adjacent_find(iterator beg, iterator end);</code></p>
<p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

void test01()
{
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(5);
	v.push_back(2);
	v.push_back(4);
	v.push_back(4);
	v.push_back(3);

	//查找相邻重复元素
	vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());
	if (it == v.end()) {
		cout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl;
	}
	else {
		cout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl;
	}
}
</code></pre>
<p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p>
<h4 id="524-binary_search">5.2.4 binary_search</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找指定元素是否存在</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>bool binary_search(iterator beg, iterator end, value);</code></p>
<p>// 查找指定的元素，查到 返回true  否则false</p>
<p>// 注意: 在<strong>无序序列中不可用</strong></p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

void test01()
{
	vector&lt;int&gt;v;

	for (int i = 0; i &lt; 10; i++)
	{
		v.push_back(i);
	}
	//二分查找
	bool ret = binary_search(v.begin(), v.end(),2);
	if (ret)
	{
		cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;
	}
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>
<h4 id="525-count">5.2.5 count</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计元素个数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>count(iterator beg, iterator end, value);</code></p>
<p>// 统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 统计的元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

//内置数据类型
void test01()
{
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(4);
	v.push_back(5);
	v.push_back(3);
	v.push_back(4);
	v.push_back(4);

	int num = count(v.begin(), v.end(), 4);

	cout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;
}

//自定义数据类型
class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}
	bool operator==(const Person &amp; p)
	{
		if (this-&gt;m_Age == p.m_Age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	string m_Name;
	int m_Age;
};

void test02()
{
	vector&lt;Person&gt; v;

	Person p1(&quot;刘备&quot;, 35);
	Person p2(&quot;关羽&quot;, 35);
	Person p3(&quot;张飞&quot;, 35);
	Person p4(&quot;赵云&quot;, 30);
	Person p5(&quot;曹操&quot;, 25);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);
    
    Person p(&quot;诸葛亮&quot;,35);

	int num = count(v.begin(), v.end(), p);
	cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;
}
int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p>
<h4 id="526-count_if">5.2.6 count_if</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>按条件统计元素个数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>count_if(iterator beg, iterator end, _Pred);</code></p>
<p>// 按条件统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 谓词</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class Greater4
{
public:
	bool operator()(int val)
	{
		return val &gt;= 4;
	}
};

//内置数据类型
void test01()
{
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(4);
	v.push_back(5);
	v.push_back(3);
	v.push_back(4);
	v.push_back(4);

	int num = count_if(v.begin(), v.end(), Greater4());

	cout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;
}

//自定义数据类型
class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	}

	string m_Name;
	int m_Age;
};

class AgeLess35
{
public:
	bool operator()(const Person &amp;p)
	{
		return p.m_Age &lt; 35;
	}
};
void test02()
{
	vector&lt;Person&gt; v;

	Person p1(&quot;刘备&quot;, 35);
	Person p2(&quot;关羽&quot;, 35);
	Person p3(&quot;张飞&quot;, 35);
	Person p4(&quot;赵云&quot;, 30);
	Person p5(&quot;曹操&quot;, 25);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);

	int num = count_if(v.begin(), v.end(), AgeLess35());
	cout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;
}


int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**按值统计用count，按条件统计用count_if</p>
<h3 id="53-常用排序算法">5.3 常用排序算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的排序算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>sort</code>             //对容器内元素进行排序</li>
<li><code>random_shuffle</code>   //洗牌   指定范围内的元素随机调整次序</li>
<li><code>merge</code>           // 容器元素合并，并存储到另一容器中</li>
<li><code>reverse</code>       // 反转指定范围的元素</li>
</ul>
<h4 id="531-sort">5.3.1 sort</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对容器内元素进行排序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>sort(iterator beg, iterator end, _Pred);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>//  beg    开始迭代器</p>
<p>//  end    结束迭代器</p>
<p>// _Pred  谓词</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

void myPrint(int val)
{
	cout &lt;&lt; val &lt;&lt; &quot; &quot;;
}

void test01() {
	vector&lt;int&gt; v;
	v.push_back(10);
	v.push_back(30);
	v.push_back(50);
	v.push_back(20);
	v.push_back(40);

	//sort默认从小到大排序
	sort(v.begin(), v.end());
	for_each(v.begin(), v.end(), myPrint);
	cout &lt;&lt; endl;

	//从大到小排序
	sort(v.begin(), v.end(), greater&lt;int&gt;());
	for_each(v.begin(), v.end(), myPrint);
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**sort属于开发中最常用的算法之一，需熟练掌握</p>
<h4 id="532-random_shuffle">5.3.2 random_shuffle</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>洗牌   指定范围内的元素随机调整次序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>random_shuffle(iterator beg, iterator end);</code></p>
<p>// 指定范围内的元素随机调整次序</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;ctime&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	srand((unsigned int)time(NULL));
	vector&lt;int&gt; v;
	for(int i = 0 ; i &lt; 10;i++)
	{
		v.push_back(i);
	}
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;

	//打乱顺序
	random_shuffle(v.begin(), v.end());
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p>
<h4 id="533-merge">5.3.3 merge</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>两个容器元素合并，并存储到另一容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 容器元素合并，并存储到另一容器中</p>
<p>// 注意: 两个容器必须是<strong>有序的</strong></p>
<p>// beg1   容器1开始迭代器<br>
// end1   容器1结束迭代器<br>
// beg2   容器2开始迭代器<br>
// end2   容器2结束迭代器<br>
// dest    目标容器开始迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	for (int i = 0; i &lt; 10 ; i++) 
    {
		v1.push_back(i);
		v2.push_back(i + 1);
	}

	vector&lt;int&gt; vtarget;
	//目标容器需要提前开辟空间
	vtarget.resize(v1.size() + v2.size());
	//合并  需要两个有序序列
	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());
	for_each(vtarget.begin(), vtarget.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**merge合并的两个容器必须的有序序列</p>
<h4 id="534-reverse">5.3.4 reverse</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器内元素进行反转</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>reverse(iterator beg, iterator end);</code></p>
<p>// 反转指定范围的元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v;
	v.push_back(10);
	v.push_back(30);
	v.push_back(50);
	v.push_back(20);
	v.push_back(40);

	cout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl;
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl;

	reverse(v.begin(), v.end());
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**reverse反转区间内元素，面试题可能涉及到</p>
<h3 id="54-常用拷贝和替换算法">5.4 常用拷贝和替换算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的拷贝和替换算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>copy</code>                      // 容器内指定范围的元素拷贝到另一容器中</li>
<li><code>replace</code>                // 将容器内指定范围的旧元素修改为新元素</li>
<li><code>replace_if</code>          // 容器内指定范围满足条件的元素替换为新元素</li>
<li><code>swap</code>                     // 互换两个容器的元素</li>
</ul>
<h4 id="541-copy">5.4.1 copy</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>容器内指定范围的元素拷贝到另一容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>copy(iterator beg, iterator end, iterator dest);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg  开始迭代器</p>
<p>// end  结束迭代器</p>
<p>// dest 目标起始迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	for (int i = 0; i &lt; 10; i++) {
		v1.push_back(i + 1);
	}
	vector&lt;int&gt; v2;
	v2.resize(v1.size());
	copy(v1.begin(), v1.end(), v2.begin());

	for_each(v2.begin(), v2.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**利用copy算法在拷贝时，目标容器记得提前开辟空间</p>
<h4 id="542-replace">5.4.2 replace</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器内指定范围的旧元素修改为新元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></p>
<p>// 将区间内旧元素 替换成 新元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// oldvalue 旧元素</p>
<p>// newvalue 新元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v;
	v.push_back(20);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	v.push_back(50);
	v.push_back(10);
	v.push_back(20);

	cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;

	//将容器中的20 替换成 2000
	cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
	replace(v.begin(), v.end(), 20,2000);
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**replace会替换区间内满足条件的元素</p>
<h4 id="543-replace_if">5.4.3 replace_if</h4>
<p><strong>功能描述:</strong></p>
<ul>
<li>将区间内满足条件的元素，替换成指定元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></p>
<p>// 按条件替换元素，满足条件的替换成指定元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _pred 谓词</p>
<p>// newvalue 替换的新元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

class ReplaceGreater30
{
public:
	bool operator()(int val)
	{
		return val &gt;= 30;
	}

};

void test01()
{
	vector&lt;int&gt; v;
	v.push_back(20);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	v.push_back(50);
	v.push_back(10);
	v.push_back(20);

	cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;

	//将容器中大于等于的30 替换成 3000
	cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
	replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);
	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p>
<h4 id="544-swap">5.4.4 swap</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>互换两个容器的元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>swap(container c1, container c2);</code></p>
<p>// 互换两个容器的元素</p>
<p>// c1容器1</p>
<p>// c2容器2</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;algorithm&gt;
#include &lt;vector&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	for (int i = 0; i &lt; 10; i++) {
		v1.push_back(i);
		v2.push_back(i+100);
	}

	cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;
	for_each(v1.begin(), v1.end(), myPrint());
	cout &lt;&lt; endl;
	for_each(v2.begin(), v2.end(), myPrint());
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;
	swap(v1, v2);
	for_each(v1.begin(), v1.end(), myPrint());
	cout &lt;&lt; endl;
	for_each(v2.begin(), v2.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**swap交换容器时，注意交换的容器要同种类型</p>
<h3 id="55-常用算术生成算法">5.5 常用算术生成算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的算术生成算法</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li>
<p><code>accumulate</code>      // 计算容器元素累计总和</p>
</li>
<li>
<p><code>fill</code>                 // 向容器中添加元素</p>
</li>
</ul>
<h4 id="551-accumulate">5.5.1 accumulate</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>计算区间内 容器元素累计总和</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>accumulate(iterator beg, iterator end, value);</code></p>
<p>// 计算容器元素累计总和</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 起始值</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;numeric&gt;
#include &lt;vector&gt;
void test01()
{
	vector&lt;int&gt; v;
	for (int i = 0; i &lt;= 100; i++) {
		v.push_back(i);
	}

	int total = accumulate(v.begin(), v.end(), 0);

	cout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**accumulate使用时头文件注意是 numeric，这个算法很实用</p>
<h4 id="552-fill">5.5.2 fill</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>向容器中填充指定的元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>fill(iterator beg, iterator end, value);</code></p>
<p>// 向容器中填充元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 填充的值</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">#include &lt;numeric&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{

	vector&lt;int&gt; v;
	v.resize(10);
	//填充
	fill(v.begin(), v.end(), 100);

	for_each(v.begin(), v.end(), myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**利用fill可以将容器区间内元素填充为 指定的值</p>
<h3 id="56-常用集合算法">5.6 常用集合算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的集合算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li>
<p><code>set_intersection</code>          // 求两个容器的交集</p>
</li>
<li>
<p><code>set_union</code>                       // 求两个容器的并集</p>
</li>
<li>
<p><code>set_difference</code>              // 求两个容器的差集</p>
</li>
</ul>
<h4 id="561-set_intersection">5.6.1 set_intersection</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个容器的交集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的交集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器<br>
// end1 容器1结束迭代器<br>
// beg2 容器2开始迭代器<br>
// end2 容器2结束迭代器<br>
// dest 目标容器开始迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	for (int i = 0; i &lt; 10; i++)
    {
		v1.push_back(i);
		v2.push_back(i+5);
	}

	vector&lt;int&gt; vTarget;
	//取两个里面较小的值给目标容器开辟空间
	vTarget.resize(min(v1.size(), v2.size()));

	//返回目标容器的最后一个元素的迭代器地址
	vector&lt;int&gt;::iterator itEnd = 
        set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

	for_each(vTarget.begin(), itEnd, myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong></p>
<ul>
<li>求交集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li>
<li>set_intersection返回值既是交集中最后一个元素的位置</li>
</ul>
<h4 id="562-set_union">5.6.2 set_union</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个集合的并集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的并集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器<br>
// end1 容器1结束迭代器<br>
// beg2 容器2开始迭代器<br>
// end2 容器2结束迭代器<br>
// dest 目标容器开始迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	for (int i = 0; i &lt; 10; i++) {
		v1.push_back(i);
		v2.push_back(i+5);
	}

	vector&lt;int&gt; vTarget;
	//取两个容器的和给目标容器开辟空间
	vTarget.resize(v1.size() + v2.size());

	//返回目标容器的最后一个元素的迭代器地址
	vector&lt;int&gt;::iterator itEnd = 
        set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

	for_each(vTarget.begin(), itEnd, myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong></p>
<ul>
<li>求并集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要<strong>两个容器相加</strong></li>
<li>set_union返回值既是并集中最后一个元素的位置</li>
</ul>
<h4 id="563-set_difference">5.6.3  set_difference</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个集合的差集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>
<p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的差集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器<br>
// end1 容器1结束迭代器<br>
// beg2 容器2开始迭代器<br>
// end2 容器2结束迭代器<br>
// dest 目标容器开始迭代器</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;vector&gt;
#include &lt;algorithm&gt;

class myPrint
{
public:
	void operator()(int val)
	{
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
	}
};

void test01()
{
	vector&lt;int&gt; v1;
	vector&lt;int&gt; v2;
	for (int i = 0; i &lt; 10; i++) {
		v1.push_back(i);
		v2.push_back(i+5);
	}

	vector&lt;int&gt; vTarget;
	//取两个里面较大的值给目标容器开辟空间
	vTarget.resize( max(v1.size() , v2.size()));

	//返回目标容器的最后一个元素的迭代器地址
	cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;
	vector&lt;int&gt;::iterator itEnd = 
        set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());
	for_each(vTarget.begin(), itEnd, myPrint());
	cout &lt;&lt; endl;


	cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;
	itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());
	for_each(vTarget.begin(), itEnd, myPrint());
	cout &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong></p>
<ul>
<li>求差集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li>
<li>set_difference返回值既是差集中最后一个元素的位置</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++基础知识]]></title>
        <id>https://tangyin1.github.io/post/cji-chu-zhi-shi/</id>
        <link href="https://tangyin1.github.io/post/cji-chu-zhi-shi/">
        </link>
        <updated>2023-08-28T14:01:40.000Z</updated>
        <summary type="html"><![CDATA[<p>💡💡💡黑马程序员C++同步笔记💡💡💡</p>
]]></summary>
        <content type="html"><![CDATA[<p>💡💡💡黑马程序员C++同步笔记💡💡💡</p>
<!-- more -->
<h1 id="c核心编程">C++核心编程</h1>
<p>本阶段主要针对C++<mark>面向对象</mark>编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<h2 id="1-内存分区模型">1 内存分区模型</h2>
<p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="11-程序运行前">1.1 程序运行前</h3>
<p>​	在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p>​	<strong>代码区：</strong></p>
<p>​		存放 CPU 执行的机器指令</p>
<p>​		代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​		代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​	<strong>全局区：</strong></p>
<p>​		全局变量和静态变量存放在此.</p>
<p>​		全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​		<mark>该区域的数据在程序结束后由操作系统释放</mark>.</p>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">//全局变量
int g_a = 10;
int g_b = 10;

//全局常量
const int c_g_a = 10;
const int c_g_b = 10;

int main() {

	//局部变量
	int a = 10;
	int b = 10;

	//打印地址
	cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;
	cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;

	cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;
	cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;

	//静态变量
	static int s_a = 10;
	static int s_b = 10;

	cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;
	cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;

	cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;
	cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;

	const int c_l_a = 10;
	const int c_l_b = 10;
	cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;
	cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>
</ul>
<h3 id="12-程序运行后">1.2 程序运行后</h3>
<p>​	<strong>栈区：</strong></p>
<p>​		由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​		注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">int * func()
{
	int a = 10;
	return &amp;a;
}

int main() {

	int *p = func();

	cout &lt;&lt; *p &lt;&lt; endl;
	cout &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>​	<strong>堆区：</strong></p>
<p>​		由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​		在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">int* func()
{
	int* a = new int(10);
	return a;
}

int main() {

	int *p = func();

	cout &lt;&lt; *p &lt;&lt; endl;
	cout &lt;&lt; *p &lt;&lt; endl;
    
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="13-new操作符">1.3 new操作符</h3>
<p>​	C++中利用<mark>new</mark>操作符在堆区开辟数据</p>
<p>​	堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <mark>delete</mark></p>
<p>​	语法：<code>new 数据类型</code></p>
<p>​	利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<pre><code class="language-c++">int* func()
{
	int* a = new int(10);
	return a;
}

int main() {

	int *p = func();

	cout &lt;&lt; *p &lt;&lt; endl;
	cout &lt;&lt; *p &lt;&lt; endl;

	//利用delete释放堆区数据
	delete p;

	//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>示例2：开辟数组</strong></p>
<pre><code class="language-c++">//堆区开辟数组
int main() {

	int* arr = new int[10];

	for (int i = 0; i &lt; 10; i++)
	{
		arr[i] = i + 100;
	}

	for (int i = 0; i &lt; 10; i++)
	{
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	}
	//释放数组 delete 后加 []
	delete[] arr;

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<h2 id="2-引用">2 引用</h2>
<h3 id="21-引用的基本使用">2.1 引用的基本使用</h3>
<p>**作用： **给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int a = 10;
	int &amp;b = a;

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

	b = 100;

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="22-引用注意事项">2.2 引用注意事项</h3>
<ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	int a = 10;
	int b = 20;
	//int &amp;c; //错误，引用必须初始化
	int &amp;c = a; //一旦初始化后，就不可以更改
	c = b; //这是赋值操作，不是更改引用

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
	cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="23-引用做函数参数">2.3 引用做函数参数</h3>
<p>**作用：**函数传参时，可以利用引用的技术让形参修饰实参</p>
<p>**优点：**可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//1. 值传递
void mySwap01(int a, int b) {
	int temp = a;
	a = b;
	b = temp;
}

//2. 地址传递
void mySwap02(int* a, int* b) {
	int temp = *a;
	*a = *b;
	*b = temp;
}

//3. 引用传递
void mySwap03(int&amp; a, int&amp; b) {
	int temp = a;
	a = b;
	b = temp;
}

int main() {

	int a = 10;
	int b = 20;

	mySwap01(a, b);
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

	mySwap02(&amp;a, &amp;b);
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

	mySwap03(a, b);
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="24-引用做函数返回值">2.4 引用做函数返回值</h3>
<p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//返回局部变量引用
int&amp; test01() {
	int a = 10; //局部变量
	return a;
}

//返回静态变量引用
int&amp; test02() {
	static int a = 20;
	return a;
}

int main() {

	//不能返回局部变量的引用
	int&amp; ref = test01();
	cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;
	cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;

	//如果函数做左值，那么必须返回引用
	int&amp; ref2 = test02();
	cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
	cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

	test02() = 1000;

	cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
	cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>​</p>
<h3 id="25-引用的本质">2.5 引用的本质</h3>
<p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<pre><code class="language-C++">//发现是引用，转换为 int* const ref = &amp;a;
void func(int&amp; ref){
	ref = 100; // ref是引用，转换为*ref = 100
}
int main(){
	int a = 10;
    
    //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改
	int&amp; ref = a; 
	ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;
    
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;
    
	func(a);
	return 0;
}
</code></pre>
<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="26-常量引用">2.6 常量引用</h3>
<p>**作用：**常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加<mark>const修饰形参</mark>，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//引用使用的场景，通常用来修饰形参
void showValue(const int&amp; v) {
	//v += 10;
	cout &lt;&lt; v &lt;&lt; endl;
}

int main() {

	//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误
	//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;
	const int&amp; ref = 10;

	//ref = 100;  //加入const后不可以修改变量
	cout &lt;&lt; ref &lt;&lt; endl;

	//函数中利用常量引用防止误操作修改实参
	int a = 10;
	showValue(a);

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h2 id="3-函数提高">3 函数提高</h2>
<h3 id="31-函数默认参数">3.1 函数默认参数</h3>
<p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code>返回值类型 函数名 （参数= 默认值）{}</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int func(int a, int b = 10, int c = 10) {
	return a + b + c;
}

//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值
//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数
int func2(int a = 10, int b = 10);
int func2(int a, int b) {
	return a + b;
}

int main() {

	cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;
	cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="32-函数占位参数">3.2 函数占位参数</h3>
<p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//函数占位参数 ，占位参数也可以有默认参数
void func(int a, int) {
	cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;
}

int main() {

	func(10,10); //占位参数必须填补

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="33-函数重载">3.3 函数重载</h3>
<h4 id="331-函数重载概述">3.3.1 函数重载概述</h4>
<p>**作用：**函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//函数重载需要函数都在同一个作用域下
void func()
{
	cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;
}
void func(int a)
{
	cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;
}
void func(double a)
{
	cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;
}
void func(int a ,double b)
{
	cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;
}
void func(double a ,int b)
{
	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;
}

//函数返回值不可以作为函数重载条件
//int func(double a, int b)
//{
//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;
//}


int main() {

	func();
	func(10);
	func(3.14);
	func(10,3.14);
	func(3.14 , 10);
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="332-函数重载注意事项">3.3.2 函数重载注意事项</h4>
<ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//函数重载注意事项
//1、引用作为重载条件

void func(int &amp;a)
{
	cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;
}

void func(const int &amp;a)
{
	cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;
}


//2、函数重载碰到函数默认参数

void func2(int a, int b = 10)
{
	cout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;
}

void func2(int a)
{
	cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;
}

int main() {
	
	int a = 10;
	func(a); //调用无const
	func(10);//调用有const


	//func2(10); //碰到默认参数产生歧义，需要避免

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h2 id="4-类和对象"><strong>4</strong> 类和对象</h2>
<p>C++面向对象的三大特性为：<mark>封装、继承、多态</mark></p>
<p>C++认为<mark>万事万物都皆为对象</mark>，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<p>​	人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...</p>
<p>​	车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...</p>
<p>​	具有相同性质的<mark>对象</mark>，我们可以抽象称为<mark>类</mark>，人属于人类，车属于车类</p>
<h3 id="41-封装">4.1 封装</h3>
<h4 id="411-封装的意义">4.1.1  封装的意义</h4>
<p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<p>​	在设计类的时候，属性和行为写在一起，表现事物</p>
<p><strong>语法：</strong> <code>class 类名{ 访问权限： 属性 / 行为 };</code></p>
<p>**示例1：**设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<pre><code class="language-C++">//圆周率
const double PI = 3.14;

//1、封装的意义
//将属性和行为作为一个整体，用来表现生活中的事物

//封装一个圆类，求圆的周长
//class代表设计一个类，后面跟着的是类名
class Circle
{
public:  //访问权限  公共的权限

	//属性
	int m_r;//半径

	//行为
	//获取到圆的周长
	double calculateZC()
	{
		//2 * pi  * r
		//获取圆的周长
		return  2 * PI * m_r;
	}
};

int main() {

	//通过圆类，创建圆的对象
	// c1就是一个具体的圆
	Circle c1;
	c1.m_r = 10; //给圆对象的半径 进行赋值操作

	//2 * pi * 10 = = 62.8
	cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**示例2：**设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<pre><code class="language-C++">//学生类
class Student {
public:
	void setName(string name) {
		m_name = name;
	}
	void setID(int id) {
		m_id = id;
	}

	void showStudent() {
		cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;
	}
public:
	string m_name;
	int m_id;
};

int main() {

	Student stu;
	stu.setName(&quot;德玛西亚&quot;);
	stu.setID(250);
	stu.showStudent();

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol>
<li>public        公共权限</li>
<li>protected 保护权限</li>
<li>private      私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//三种权限
//公共权限  public     类内可以访问  类外可以访问
//保护权限  protected  类内可以访问  类外不可以访问
//私有权限  private    类内可以访问  类外不可以访问

class Person
{
	//姓名  公共权限
public:
	string m_Name;

	//汽车  保护权限
protected:
	string m_Car;

	//银行卡密码  私有权限
private:
	int m_Password;

public:
	void func()
	{
		m_Name = &quot;张三&quot;;
		m_Car = &quot;拖拉机&quot;;
		m_Password = 123456;
	}
};

int main() {

	Person p;
	p.m_Name = &quot;李四&quot;;
	//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到
	//p.m_Password = 123; //私有权限类外访问不到

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="412-struct和class区别">4.1.2 struct和class区别</h4>
<p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class   默认权限为私有</li>
</ul>
<pre><code class="language-C++">class C1
{
	int  m_A; //默认是私有权限
};

struct C2
{
	int m_A;  //默认是公共权限
};

int main() {

	C1 c1;
	c1.m_A = 10; //错误，访问权限是私有

	C2 c2;
	c2.m_A = 10; //正确，访问权限是公共

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="413-成员属性设置为私有">4.1.3 成员属性设置为私有</h4>
<p>**优点1：**将所有成员属性设置为私有，可以自己控制读写权限</p>
<p>**优点2：**对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person {
public:

	//姓名设置可读可写
	void setName(string name) {
		m_Name = name;
	}
	string getName()
	{
		return m_Name;
	}


	//获取年龄 
	int getAge() {
		return m_Age;
	}
	//设置年龄
	void setAge(int age) {
		if (age &lt; 0 || age &gt; 150) {
			cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;
			return;
		}
		m_Age = age;
	}

	//情人设置为只写
	void setLover(string lover) {
		m_Lover = lover;
	}

private:
	string m_Name; //可读可写  姓名
	
	int m_Age; //只读  年龄

	string m_Lover; //只写  情人
};


int main() {

	Person p;
	//姓名设置
	p.setName(&quot;张三&quot;);
	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;

	//年龄设置
	p.setAge(50);
	cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;

	//情人设置
	p.setLover(&quot;苍井&quot;);
	//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<figure data-type="image" tabindex="1"><img src="assets/1545533548532.png" alt="1545533548532" loading="lazy"></figure>
<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<figure data-type="image" tabindex="2"><img src="assets/1545533829184.png" alt="1545533829184" loading="lazy"></figure>
<h3 id="42-对象的初始化和清理">4.2 对象的初始化和清理</h3>
<ul>
<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="421-构造函数和析构函数">4.2.1 构造函数和析构函数</h4>
<p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<p>​	一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​	同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名(){}</code></p>
<ol>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名(){}</code></p>
<ol>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号  ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<pre><code class="language-C++">class Person
{
public:
	//构造函数
	Person()
	{
		cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;
	}
	//析构函数
	~Person()
	{
		cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;
	}

};

void test01()
{
	Person p;
}

int main() {
	
	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="422-构造函数的分类及调用">4.2.2 构造函数的分类及调用</h4>
<p>两种分类方式：</p>
<p>​	按参数分为： 有参构造和无参构造</p>
<p>​	按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​	括号法</p>
<p>​	显示法</p>
<p>​	隐式转换法</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//1、构造函数分类
// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数
// 按照类型分类分为 普通构造和拷贝构造

class Person {
public:
	//无参（默认）构造函数
	Person() {
		cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;
	}
	//有参构造函数
	Person(int a) {
		age = a;
		cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;
	}
	//拷贝构造函数
	Person(const Person&amp; p) {
		age = p.age;
		cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
	}
	//析构函数
	~Person() {
		cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
	}
public:
	int age;
};

//2、构造函数的调用
//调用无参构造函数
void test01() {
	Person p; //调用无参构造函数
}

//调用有参的构造函数
void test02() {

	//2.1  括号法，常用
	Person p1(10);
	//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明
	//Person p2();

	//2.2 显式法
	Person p2 = Person(10); 
	Person p3 = Person(p2);
	//Person(10)单独写就是匿名对象  当前行结束之后，马上析构

	//2.3 隐式转换法
	Person p4 = 10; // Person p4 = Person(10); 
	Person p5 = p4; // Person p5 = Person(p4); 

	//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明
	//Person p5(p4);
}

int main() {

	test01();
	//test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="423-拷贝构造函数调用时机">4.2.3 拷贝构造函数调用时机</h4>
<p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person {
public:
	Person() {
		cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;
		mAge = 0;
	}
	Person(int age) {
		cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;
		mAge = age;
	}
	Person(const Person&amp; p) {
		cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
		mAge = p.mAge;
	}
	//析构函数在释放内存之前调用
	~Person() {
		cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
	}
public:
	int mAge;
};

//1. 使用一个已经创建完毕的对象来初始化一个新对象
void test01() {

	Person man(100); //p对象已经创建完毕
	Person newman(man); //调用拷贝构造函数
	Person newman2 = man; //拷贝构造

	//Person newman3;
	//newman3 = man; //不是调用拷贝构造函数，赋值操作
}

//2. 值传递的方式给函数参数传值
//相当于Person p1 = p;
void doWork(Person p1) {}
void test02() {
	Person p; //无参构造函数
	doWork(p);
}

//3. 以值方式返回局部对象
Person doWork2()
{
	Person p1;
	cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;
	return p1;
}

void test03()
{
	Person p = doWork2();
	cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;
}


int main() {

	//test01();
	//test02();
	test03();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="424-构造函数调用规则">4.2.4 构造函数调用规则</h4>
<p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li>
<p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p>
</li>
<li>
<p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p>
</li>
</ul>
<p>示例：</p>
<pre><code class="language-C++">class Person {
public:
	//无参（默认）构造函数
	Person() {
		cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;
	}
	//有参构造函数
	Person(int a) {
		age = a;
		cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;
	}
	//拷贝构造函数
	Person(const Person&amp; p) {
		age = p.age;
		cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
	}
	//析构函数
	~Person() {
		cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
	}
public:
	int age;
};

void test01()
{
	Person p1(18);
	//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作
	Person p2(p1);

	cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;
}

void test02()
{
	//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造
	Person p1; //此时如果用户自己没有提供默认构造，会出错
	Person p2(10); //用户提供的有参
	Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供

	//如果用户提供拷贝构造，编译器不会提供其他构造函数
	Person p4; //此时如果用户自己没有提供默认构造，会出错
	Person p5(10); //此时如果用户自己没有提供有参，会出错
	Person p6(p5); //用户自己提供拷贝构造
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="425-深拷贝与浅拷贝">4.2.5 深拷贝与浅拷贝</h4>
<p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person {
public:
	//无参（默认）构造函数
	Person() {
		cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;
	}
	//有参构造函数
	Person(int age ,int height) {
		
		cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;

		m_age = age;
		m_height = new int(height);
		
	}
	//拷贝构造函数  
	Person(const Person&amp; p) {
		cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
		//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题
		m_age = p.m_age;
		m_height = new int(*p.m_height);
		
	}

	//析构函数
	~Person() {
		cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
		if (m_height != NULL)
		{
			delete m_height;
		}
	}
public:
	int m_age;
	int* m_height;
};

void test01()
{
	Person p1(18, 180);

	Person p2(p1);

	cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;

	cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="426-初始化列表">4.2.6 初始化列表</h4>
<p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person {
public:

	////传统方式初始化
	//Person(int a, int b, int c) {
	//	m_A = a;
	//	m_B = b;
	//	m_C = c;
	//}

	//初始化列表方式初始化
	Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}
	void PrintPerson() {
		cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;
		cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;
		cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;
	}
private:
	int m_A;
	int m_B;
	int m_C;
};

int main() {

	Person p(1, 2, 3);
	p.PrintPerson();


	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="427-类对象作为类成员">4.2.7 类对象作为类成员</h4>
<p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<pre><code class="language-C++">class A {}
class B
{
    A a；
}
</code></pre>
<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Phone
{
public:
	Phone(string name)
	{
		m_PhoneName = name;
		cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;
	}

	~Phone()
	{
		cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;
	}

	string m_PhoneName;

};


class Person
{
public:

	//初始化列表可以告诉编译器调用哪一个构造函数
	Person(string name, string pName) :m_Name(name), m_Phone(pName)
	{
		cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;
	}

	~Person()
	{
		cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;
	}

	void playGame()
	{
		cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;
	}

	string m_Name;
	Phone m_Phone;

};
void test01()
{
	//当类中成员是其他类对象时，我们称该成员为 对象成员
	//构造的顺序是 ：先调用对象成员的构造，再调用本类构造
	//析构顺序与构造相反
	Person p(&quot;张三&quot; , &quot;苹果X&quot;);
	p.playGame();

}


int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="428-静态成员">4.2.8 静态成员</h4>
<p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量
<ul>
<li>所有对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
</li>
<li>静态成员函数
<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<p>**示例1 ：**静态成员变量</p>
<pre><code class="language-C++">class Person
{
	
public:

	static int m_A; //静态成员变量

	//静态成员变量特点：
	//1 在编译阶段分配内存
	//2 类内声明，类外初始化
	//3 所有对象共享同一份数据

private:
	static int m_B; //静态成员变量也是有访问权限的
};
int Person::m_A = 10;
int Person::m_B = 10;

void test01()
{
	//静态成员变量两种访问方式

	//1、通过对象
	Person p1;
	p1.m_A = 100;
	cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;

	Person p2;
	p2.m_A = 200;
	cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据
	cout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;

	//2、通过类名
	cout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;


	//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**示例2：**静态成员函数</p>
<pre><code class="language-C++">class Person
{

public:

	//静态成员函数特点：
	//1 程序共享一个函数
	//2 静态成员函数只能访问静态成员变量
	
	static void func()
	{
		cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;
		m_A = 100;
		//m_B = 100; //错误，不可以访问非静态成员变量
	}

	static int m_A; //静态成员变量
	int m_B; // 
private:

	//静态成员函数也是有访问权限的
	static void func2()
	{
		cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;
	}
};
int Person::m_A = 10;


void test01()
{
	//静态成员变量两种访问方式

	//1、通过对象
	Person p1;
	p1.func();

	//2、通过类名
	Person::func();


	//Person::func2(); //私有权限访问不到
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="43-c对象模型和this指针">4.3 C++对象模型和this指针</h3>
<h4 id="431-成员变量和成员函数分开存储">4.3.1 成员变量和成员函数分开存储</h4>
<p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<pre><code class="language-C++">class Person {
public:
	Person() {
		mA = 0;
	}
	//非静态成员变量占对象空间
	int mA;
	//静态成员变量不占对象空间
	static int mB; 
	//函数也不占对象空间，所有函数共享一个函数实例
	void func() {
		cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;
	}
	//静态成员函数也不占对象空间
	static void sfunc() {
	}
};

int main() {

	cout &lt;&lt; sizeof(Person) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="432-this指针概念">4.3.2 this指针概念</h4>
<p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<pre><code class="language-C++">class Person
{
public:

	Person(int age)
	{
		//1、当形参和成员变量同名时，可用this指针来区分
		this-&gt;age = age;
	}

	Person&amp; PersonAddPerson(Person p)
	{
		this-&gt;age += p.age;
		//返回对象本身
		return *this;
	}

	int age;
};

void test01()
{
	Person p1(10);
	cout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl;

	Person p2(10);
	p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);
	cout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="433-空指针访问成员函数">4.3.3 空指针访问成员函数</h4>
<p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//空指针访问成员函数
class Person {
public:

	void ShowClassName() {
		cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;
	}

	void ShowPerson() {
		if (this == NULL) {
			return;
		}
		cout &lt;&lt; mAge &lt;&lt; endl;
	}

public:
	int mAge;
};

void test01()
{
	Person * p = NULL;
	p-&gt;ShowClassName(); //空指针，可以调用成员函数
	p-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="434-const修饰成员函数">4.3.4 const修饰成员函数</h4>
<p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person {
public:
	Person() {
		m_A = 0;
		m_B = 0;
	}

	//this指针的本质是一个指针常量，指针的指向不可修改
	//如果想让指针指向的值也不可以修改，需要声明常函数
	void ShowPerson() const {
		//const Type* const pointer;
		//this = NULL; //不能修改指针的指向 Person* const this;
		//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的

		//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量
		this-&gt;m_B = 100;
	}

	void MyFunc() const {
		//mA = 10000;
	}

public:
	int m_A;
	mutable int m_B; //可修改 可变的
};


//const修饰对象  常对象
void test01() {

	const Person person; //常量对象  
	cout &lt;&lt; person.m_A &lt;&lt; endl;
	//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问
	person.m_B = 100; //但是常对象可以修改mutable修饰成员变量

	//常对象访问成员函数
	person.MyFunc(); //常对象不能调用const的函数

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="44-友元">4.4 友元</h3>
<p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为  <mark>friend</mark></p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="441-全局函数做友元">4.4.1 全局函数做友元</h4>
<pre><code class="language-C++">class Building
{
	//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容
	friend void goodGay(Building * building);

public:

	Building()
	{
		this-&gt;m_SittingRoom = &quot;客厅&quot;;
		this-&gt;m_BedRoom = &quot;卧室&quot;;
	}


public:
	string m_SittingRoom; //客厅

private:
	string m_BedRoom; //卧室
};


void goodGay(Building * building)
{
	cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;
	cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;
}


void test01()
{
	Building b;
	goodGay(&amp;b);
}

int main(){

	test01();

	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
<h4 id="442-类做友元">4.4.2 类做友元</h4>
<pre><code class="language-C++">class Building;
class goodGay
{
public:

	goodGay();
	void visit();

private:
	Building *building;
};


class Building
{
	//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容
	friend class goodGay;

public:
	Building();

public:
	string m_SittingRoom; //客厅
private:
	string m_BedRoom;//卧室
};

Building::Building()
{
	this-&gt;m_SittingRoom = &quot;客厅&quot;;
	this-&gt;m_BedRoom = &quot;卧室&quot;;
}

goodGay::goodGay()
{
	building = new Building;
}

void goodGay::visit()
{
	cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;
	cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;
}

void test01()
{
	goodGay gg;
	gg.visit();

}

int main(){

	test01();

	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
<h4 id="443-成员函数做友元">4.4.3 成员函数做友元</h4>
<pre><code class="language-C++">class Building;
class goodGay
{
public:

	goodGay();
	void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容
	void visit2(); 

private:
	Building *building;
};


class Building
{
	//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容
	friend void goodGay::visit();

public:
	Building();

public:
	string m_SittingRoom; //客厅
private:
	string m_BedRoom;//卧室
};

Building::Building()
{
	this-&gt;m_SittingRoom = &quot;客厅&quot;;
	this-&gt;m_BedRoom = &quot;卧室&quot;;
}

goodGay::goodGay()
{
	building = new Building;
}

void goodGay::visit()
{
	cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;
	cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;
}

void goodGay::visit2()
{
	cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;
	//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;
}

void test01()
{
	goodGay  gg;
	gg.visit();

}

int main(){
    
	test01();

	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
<h3 id="45-运算符重载">4.5 运算符重载</h3>
<p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="451-加号运算符重载">4.5.1 加号运算符重载</h4>
<p>作用：实现两个自定义数据类型相加的运算</p>
<pre><code class="language-C++">class Person {
public:
	Person() {};
	Person(int a, int b)
	{
		this-&gt;m_A = a;
		this-&gt;m_B = b;
	}
	//成员函数实现 + 号运算符重载
	Person operator+(const Person&amp; p) {
		Person temp;
		temp.m_A = this-&gt;m_A + p.m_A;
		temp.m_B = this-&gt;m_B + p.m_B;
		return temp;
	}


public:
	int m_A;
	int m_B;
};

//全局函数实现 + 号运算符重载
//Person operator+(const Person&amp; p1, const Person&amp; p2) {
//	Person temp(0, 0);
//	temp.m_A = p1.m_A + p2.m_A;
//	temp.m_B = p1.m_B + p2.m_B;
//	return temp;
//}

//运算符重载 可以发生函数重载 
Person operator+(const Person&amp; p2, int val)  
{
	Person temp;
	temp.m_A = p2.m_A + val;
	temp.m_B = p2.m_B + val;
	return temp;
}

void test() {

	Person p1(10, 10);
	Person p2(20, 20);

	//成员函数方式
	Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)
	cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;


	Person p4 = p3 + 10; //相当于 operator+(p3,10)
	cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;

}

int main() {

	test();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
</blockquote>
<blockquote>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="452-左移运算符重载">4.5.2 左移运算符重载</h4>
<p>作用：可以输出自定义数据类型</p>
<pre><code class="language-C++">class Person {
	friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);

public:

	Person(int a, int b)
	{
		this-&gt;m_A = a;
		this-&gt;m_B = b;
	}

	//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果
	//void operator&lt;&lt;(Person&amp; p){
	//}

private:
	int m_A;
	int m_B;
};

//全局函数实现左移重载
//ostream对象只能有一个
ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {
	out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;
	return out;
}

void test() {

	Person p1(10, 20);

	cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程
}

int main() {

	test();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="453-递增运算符重载">4.5.3 递增运算符重载</h4>
<p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<pre><code class="language-C++">class MyInteger {

	friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);

public:
	MyInteger() {
		m_Num = 0;
	}
	//前置++
	MyInteger&amp; operator++() {
		//先++
		m_Num++;
		//再返回
		return *this;
	}

	//后置++
	MyInteger operator++(int) {
		//先返回
		MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；
		m_Num++;
		return temp;
	}

private:
	int m_Num;
};


ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {
	out &lt;&lt; myint.m_Num;
	return out;
}


//前置++ 先++ 再返回
void test01() {
	MyInteger myInt;
	cout &lt;&lt; ++myInt &lt;&lt; endl;
	cout &lt;&lt; myInt &lt;&lt; endl;
}

//后置++ 先返回 再++
void test02() {

	MyInteger myInt;
	cout &lt;&lt; myInt++ &lt;&lt; endl;
	cout &lt;&lt; myInt &lt;&lt; endl;
}

int main() {

	test01();
	//test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="454-赋值运算符重载">4.5.4 赋值运算符重载</h4>
<p>c++编译器至少给一个类添加4个函数</p>
<ol>
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person
{
public:

	Person(int age)
	{
		//将年龄数据开辟到堆区
		m_Age = new int(age);
	}

	//重载赋值运算符 
	Person&amp; operator=(Person &amp;p)
	{
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
		//编译器提供的代码是浅拷贝
		//m_Age = p.m_Age;

		//提供深拷贝 解决浅拷贝的问题
		m_Age = new int(*p.m_Age);

		//返回自身
		return *this;
	}


	~Person()
	{
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
	}

	//年龄的指针
	int *m_Age;

};


void test01()
{
	Person p1(18);

	Person p2(20);

	Person p3(30);

	p3 = p2 = p1; //赋值操作

	cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;

	cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;

	cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;
}

int main() {

	test01();

	//int a = 10;
	//int b = 20;
	//int c = 30;

	//c = b = a;
	//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
	//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="455-关系运算符重载">4.5.5 关系运算符重载</h4>
<p>**作用：**重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Person
{
public:
	Person(string name, int age)
	{
		this-&gt;m_Name = name;
		this-&gt;m_Age = age;
	};

	bool operator==(Person &amp; p)
	{
		if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	bool operator!=(Person &amp; p)
	{
		if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	string m_Name;
	int m_Age;
};

void test01()
{
	//int a = 0;
	//int b = 0;

	Person a(&quot;孙悟空&quot;, 18);
	Person b(&quot;孙悟空&quot;, 18);

	if (a == b)
	{
		cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
	}

	if (a != b)
	{
		cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
	}
}


int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="456-函数调用运算符重载">4.5.6 函数调用运算符重载</h4>
<ul>
<li>函数调用运算符 ()  也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class MyPrint
{
public:
	void operator()(string text)
	{
		cout &lt;&lt; text &lt;&lt; endl;
	}

};
void test01()
{
	//重载的（）操作符 也称为仿函数
	MyPrint myFunc;
	myFunc(&quot;hello world&quot;);
}


class MyAdd
{
public:
	int operator()(int v1, int v2)
	{
		return v1 + v2;
	}
};

void test02()
{
	MyAdd add;
	int ret = add(10, 10);
	cout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;

	//匿名对象调用  
	cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;
}

int main() {

	test01();
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="46-继承">4.6  继承</h3>
<p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<figure data-type="image" tabindex="3"><img src="assets/1544861202252.png" alt="1544861202252" loading="lazy"></figure>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="461-继承的基本语法">4.6.1 继承的基本语法</h4>
<p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<pre><code class="language-C++">//Java页面
class Java 
{
public:
	void header()
	{
		cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;
	}
	void footer()
	{
		cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
	}
	void left()
	{
		cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
	}
	void content()
	{
		cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;
	}
};
//Python页面
class Python
{
public:
	void header()
	{
		cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;
	}
	void footer()
	{
		cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
	}
	void left()
	{
		cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
	}
	void content()
	{
		cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;
	}
};
//C++页面
class CPP 
{
public:
	void header()
	{
		cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;
	}
	void footer()
	{
		cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
	}
	void left()
	{
		cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
	}
	void content()
	{
		cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;
	}
};

void test01()
{
	//Java页面
	cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;
	Java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.content();
	cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

	//Python页面
	cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
	Python py;
	py.header();
	py.footer();
	py.left();
	py.content();
	cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

	//C++页面
	cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
	CPP cp;
	cp.header();
	cp.footer();
	cp.left();
	cp.content();

}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>继承实现：</strong></p>
<pre><code class="language-C++">//公共页面
class BasePage
{
public:
	void header()
	{
		cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;
	}

	void footer()
	{
		cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
	}
	void left()
	{
		cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
	}

};

//Java页面
class Java : public BasePage
{
public:
	void content()
	{
		cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;
	}
};
//Python页面
class Python : public BasePage
{
public:
	void content()
	{
		cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;
	}
};
//C++页面
class CPP : public BasePage
{
public:
	void content()
	{
		cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;
	}
};

void test01()
{
	//Java页面
	cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;
	Java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.content();
	cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

	//Python页面
	cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
	Python py;
	py.header();
	py.footer();
	py.left();
	py.content();
	cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

	//C++页面
	cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
	CPP cp;
	cp.header();
	cp.footer();
	cp.left();
	cp.content();


}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>总结：</strong></p>
<p>继承的好处：<mark>可以减少重复的代码</mark></p>
<p>class A : public B;</p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="462-继承方式">4.6.2 继承方式</h4>
<p>继承的语法：<code>class 子类 : 继承方式 父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<figure data-type="image" tabindex="4"><img src="assets/clip_image002.png" alt="img" loading="lazy"></figure>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base1
{
public: 
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

//公共继承
class Son1 :public Base1
{
public:
	void func()
	{
		m_A; //可访问 public权限
		m_B; //可访问 protected权限
		//m_C; //不可访问
	}
};

void myClass()
{
	Son1 s1;
	s1.m_A; //其他类只能访问到公共权限
}

//保护继承
class Base2
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};
class Son2:protected Base2
{
public:
	void func()
	{
		m_A; //可访问 protected权限
		m_B; //可访问 protected权限
		//m_C; //不可访问
	}
};
void myClass2()
{
	Son2 s;
	//s.m_A; //不可访问
}

//私有继承
class Base3
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};
class Son3:private Base3
{
public:
	void func()
	{
		m_A; //可访问 private权限
		m_B; //可访问 private权限
		//m_C; //不可访问
	}
};
class GrandSon3 :public Son3
{
public:
	void func()
	{
		//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到
		//m_A;
		//m_B;
		//m_C;
	}
};
</code></pre>
<h4 id="463-继承中的对象模型">4.6.3 继承中的对象模型</h4>
<p>**问题：**从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C; //私有成员只是被隐藏了，但是还是会继承下去
};

//公共继承
class Son :public Base
{
public:
	int m_D;
};

void test01()
{
	cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>利用工具查看：</p>
<figure data-type="image" tabindex="5"><img src="assets/1545881904150.png" alt="1545881904150" loading="lazy"></figure>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>
<p>效果如下图：</p>
<figure data-type="image" tabindex="6"><img src="assets/1545882158050.png" alt="1545882158050" loading="lazy"></figure>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="464-继承中构造和析构顺序">4.6.4 继承中构造和析构顺序</h4>
<p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base 
{
public:
	Base()
	{
		cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;
	}
	~Base()
	{
		cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;
	}
};

class Son : public Base
{
public:
	Son()
	{
		cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;
	}
	~Son()
	{
		cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;
	}

};


void test01()
{
	//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反
	Son s;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="465-继承同名成员处理方式">4.6.5 继承同名成员处理方式</h4>
<p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base {
public:
	Base()
	{
		m_A = 100;
	}

	void func()
	{
		cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;
	}

	void func(int a)
	{
		cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;
	}

public:
	int m_A;
};


class Son : public Base {
public:
	Son()
	{
		m_A = 200;
	}

	//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数
	//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域
	void func()
	{
		cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;
	}
public:
	int m_A;
};

void test01()
{
	Son s;

	cout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;
	cout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;

	s.func();
	s.Base::func();
	s.Base::func(10);

}
int main() {

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
}
</code></pre>
<p>总结：</p>
<ol>
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="466-继承同名静态成员处理方式">4.6.6 继承同名静态成员处理方式</h4>
<p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base {
public:
	static void func()
	{
		cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;
	}
	static void func(int a)
	{
		cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;
	}

	static int m_A;
};

int Base::m_A = 100;

class Son : public Base {
public:
	static void func()
	{
		cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;
	}
	static int m_A;
};

int Son::m_A = 200;

//同名成员属性
void test01()
{
	//通过对象访问
	cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;
	Son s;
	cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;
	cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;

	//通过类名访问
	cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;
	cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;
}

//同名成员函数
void test02()
{
	//通过对象访问
	cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;
	Son s;
	s.func();
	s.Base::func();

	cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
	Son::func();
	Son::Base::func();
	//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问
	Son::Base::func(100);
}
int main() {

	//test01();
	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="467-多继承语法">4.6.7 多继承语法</h4>
<p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base1 {
public:
	Base1()
	{
		m_A = 100;
	}
public:
	int m_A;
};

class Base2 {
public:
	Base2()
	{
		m_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确
	}
public:
	int m_A;
};

//语法：class 子类：继承方式 父类1 ，继承方式 父类2 
class Son : public Base2, public Base1 
{
public:
	Son()
	{
		m_C = 300;
		m_D = 400;
	}
public:
	int m_C;
	int m_D;
};


//多继承容易产生成员同名的情况
//通过使用类名作用域可以区分调用哪一个基类的成员
void test01()
{
	Son s;
	cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;
	cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;
	cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="468-菱形继承">4.6.8 菱形继承</h4>
<p><strong>菱形继承概念：</strong></p>
<p>​	两个派生类继承同一个基类</p>
<p>​	又有某个类同时继承者两个派生类</p>
<p>​	这种继承被称为菱形继承，或者钻石继承</p>
<p><strong>典型的菱形继承案例：</strong></p>
<figure data-type="image" tabindex="7"><img src="assets/clip_image002.jpg" alt="IMG_256" loading="lazy"></figure>
<p><strong>菱形继承问题：</strong></p>
<ol>
<li>
<pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。
</code></pre>
</li>
<li>
<pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。
</code></pre>
</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Animal
{
public:
	int m_Age;
};

//继承前加virtual关键字后，变为虚继承
//此时公共的父类Animal称为虚基类
class Sheep : virtual public Animal {};
class Tuo   : virtual public Animal {};
class SheepTuo : public Sheep, public Tuo {};

void test01()
{
	SheepTuo st;
	st.Sheep::m_Age = 100;
	st.Tuo::m_Age = 200;

	cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;
	cout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;
	cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;
}


int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="47-多态">4.7  多态</h3>
<h4 id="471-多态的基本概念">4.7.1 多态的基本概念</h4>
<p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<pre><code class="language-C++">class Animal
{
public:
	//Speak函数就是虚函数
	//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。
	virtual void speak()
	{
		cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;
	}
};

class Cat :public Animal
{
public:
	void speak()
	{
		cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;
	}
};

class Dog :public Animal
{
public:

	void speak()
	{
		cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;
	}

};
//我们希望传入什么对象，那么就调用什么对象的函数
//如果函数地址在编译阶段就能确定，那么静态联编
//如果函数地址在运行阶段才能确定，就是动态联编

void DoSpeak(Animal &amp; animal)
{
	animal.speak();
}
//
//多态满足条件： 
//1、有继承关系
//2、子类重写父类中的虚函数
//多态使用：
//父类指针或引用指向子类对象

void test01()
{
	Cat cat;
	DoSpeak(cat);


	Dog dog;
	DoSpeak(dog);
}


int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>
<h4 id="472-多态案例一-计算器类">4.7.2 多态案例一-计算器类</h4>
<p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//普通实现
class Calculator {
public:
	int getResult(string oper)
	{
		if (oper == &quot;+&quot;) {
			return m_Num1 + m_Num2;
		}
		else if (oper == &quot;-&quot;) {
			return m_Num1 - m_Num2;
		}
		else if (oper == &quot;*&quot;) {
			return m_Num1 * m_Num2;
		}
		//如果要提供新的运算，需要修改源码
	}
public:
	int m_Num1;
	int m_Num2;
};

void test01()
{
	//普通实现测试
	Calculator c;
	c.m_Num1 = 10;
	c.m_Num2 = 10;
	cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;

	cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;

	cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;
}



//多态实现
//抽象计算器类
//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护
class AbstractCalculator
{
public :

	virtual int getResult()
	{
		return 0;
	}

	int m_Num1;
	int m_Num2;
};

//加法计算器
class AddCalculator :public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 + m_Num2;
	}
};

//减法计算器
class SubCalculator :public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 - m_Num2;
	}
};

//乘法计算器
class MulCalculator :public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 * m_Num2;
	}
};


void test02()
{
	//创建加法计算器
	AbstractCalculator *abc = new AddCalculator;
	abc-&gt;m_Num1 = 10;
	abc-&gt;m_Num2 = 10;
	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
	delete abc;  //用完了记得销毁

	//创建减法计算器
	abc = new SubCalculator;
	abc-&gt;m_Num1 = 10;
	abc-&gt;m_Num2 = 10;
	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
	delete abc;  

	//创建乘法计算器
	abc = new MulCalculator;
	abc-&gt;m_Num1 = 10;
	abc-&gt;m_Num2 = 10;
	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
	delete abc;
}

int main() {

	//test01();

	test02();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="473-纯虚函数和抽象类">4.7.3 纯虚函数和抽象类</h4>
<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为<mark>抽象类</mark></p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Base
{
public:
	//纯虚函数
	//类中只要有一个纯虚函数就称为抽象类
	//抽象类无法实例化对象
	//子类必须重写父类中的纯虚函数，否则也属于抽象类
	virtual void func() = 0;
};

class Son :public Base
{
public:
	virtual void func() 
	{
		cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;
	};
};

void test01()
{
	Base * base = NULL;
	//base = new Base; // 错误，抽象类无法实例化对象
	base = new Son;
	base-&gt;func();
	delete base;//记得销毁
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="474-多态案例二-制作饮品">4.7.4 多态案例二-制作饮品</h4>
<p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<figure data-type="image" tabindex="8"><img src="assets/1545985945198.png" alt="1545985945198" loading="lazy"></figure>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//抽象制作饮品
class AbstractDrinking {
public:
	//烧水
	virtual void Boil() = 0;
	//冲泡
	virtual void Brew() = 0;
	//倒入杯中
	virtual void PourInCup() = 0;
	//加入辅料
	virtual void PutSomething() = 0;
	//规定流程
	void MakeDrink() {
		Boil();
		Brew();
		PourInCup();
		PutSomething();
	}
};

//制作咖啡
class Coffee : public AbstractDrinking {
public:
	//烧水
	virtual void Boil() {
		cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;
	}
	//冲泡
	virtual void Brew() {
		cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;
	}
	//倒入杯中
	virtual void PourInCup() {
		cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;
	}
	//加入辅料
	virtual void PutSomething() {
		cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;
	}
};

//制作茶水
class Tea : public AbstractDrinking {
public:
	//烧水
	virtual void Boil() {
		cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;
	}
	//冲泡
	virtual void Brew() {
		cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;
	}
	//倒入杯中
	virtual void PourInCup() {
		cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;
	}
	//加入辅料
	virtual void PutSomething() {
		cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;
	}
};

//业务函数
void DoWork(AbstractDrinking* drink) {
	drink-&gt;MakeDrink();
	delete drink;
}

void test01() {
	DoWork(new Coffee);
	cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;
	DoWork(new Tea);
}


int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="475-虚析构和纯虚析构">4.7.5 虚析构和纯虚析构</h4>
<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名(){}</code></p>
<p>纯虚析构语法：</p>
<p><code>virtual ~类名() = 0;</code></p>
<p><code>类名::~类名(){}</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">class Animal {
public:

	Animal()
	{
		cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;
	}
	virtual void Speak() = 0;

	//析构函数加上virtual关键字，变成虚析构函数
	//virtual ~Animal()
	//{
	//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;
	//}


	virtual ~Animal() = 0;
};

Animal::~Animal()
{
	cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;
}

//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。

class Cat : public Animal {
public:
	Cat(string name)
	{
		cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;
		m_Name = new string(name);
	}
	virtual void Speak()
	{
		cout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;
	}
	~Cat()
	{
		cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;
		if (this-&gt;m_Name != NULL) {
			delete m_Name;
			m_Name = NULL;
		}
	}

public:
	string *m_Name;
};

void test01()
{
	Animal *animal = new Cat(&quot;Tom&quot;);
	animal-&gt;Speak();

	//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏
	//怎么解决？给基类增加一个虚析构函数
	//虚析构函数就是用来解决通过父类指针释放子类对象
	delete animal;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<p>​	1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​	2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​	3. 拥有纯虚析构函数的类也属于抽象类</p>
<h4 id="476-多态案例三-电脑组装">4.7.6 多态案例三-电脑组装</h4>
<p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

//抽象CPU类
class CPU
{
public:
	//抽象的计算函数
	virtual void calculate() = 0;
};

//抽象显卡类
class VideoCard
{
public:
	//抽象的显示函数
	virtual void display() = 0;
};

//抽象内存条类
class Memory
{
public:
	//抽象的存储函数
	virtual void storage() = 0;
};

//电脑类
class Computer
{
public:
	Computer(CPU * cpu, VideoCard * vc, Memory * mem)
	{
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
	}

	//提供工作的函数
	void work()
	{
		//让零件工作起来，调用接口
		m_cpu-&gt;calculate();

		m_vc-&gt;display();

		m_mem-&gt;storage();
	}

	//提供析构函数 释放3个电脑零件
	~Computer()
	{

		//释放CPU零件
		if (m_cpu != NULL)
		{
			delete m_cpu;
			m_cpu = NULL;
		}

		//释放显卡零件
		if (m_vc != NULL)
		{
			delete m_vc;
			m_vc = NULL;
		}

		//释放内存条零件
		if (m_mem != NULL)
		{
			delete m_mem;
			m_mem = NULL;
		}
	}

private:

	CPU * m_cpu; //CPU的零件指针
	VideoCard * m_vc; //显卡零件指针
	Memory * m_mem; //内存条零件指针
};

//具体厂商
//Intel厂商
class IntelCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;
	}
};

class IntelVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;
	}
};

class IntelMemory :public Memory
{
public:
	virtual void storage()
	{
		cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;
	}
};

//Lenovo厂商
class LenovoCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;
	}
};

class LenovoVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;
	}
};

class LenovoMemory :public Memory
{
public:
	virtual void storage()
	{
		cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;
	}
};


void test01()
{
	//第一台电脑零件
	CPU * intelCpu = new IntelCPU;
	VideoCard * intelCard = new IntelVideoCard;
	Memory * intelMem = new IntelMemory;

	cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;
	//创建第一台电脑
	Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);
	computer1-&gt;work();
	delete computer1;

	cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;
	//第二台电脑组装
	Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;
	computer2-&gt;work();
	delete computer2;

	cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;
	//第三台电脑组装
	Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;
	computer3-&gt;work();
	delete computer3;

}
</code></pre>
<h2 id="5-文件操作">5 文件操作</h2>
<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 <mark>&lt; fstream &gt;</mark></p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="51文本文件">5.1文本文件</h3>
<h4 id="511写文件">5.1.1写文件</h4>
<p>写文件步骤如下：</p>
<ol>
<li>
<p>包含头文件</p>
<p>#include &lt;fstream&gt;</p>
</li>
<li>
<p>创建流对象</p>
<p>ofstream ofs;</p>
</li>
<li>
<p>打开文件</p>
<p>ofs.open(&quot;文件路径&quot;,打开方式);</p>
</li>
<li>
<p>写数据</p>
<p>ofs &lt;&lt; &quot;写入的数据&quot;;</p>
</li>
<li>
<p>关闭文件</p>
<p>ofs.close();</p>
</li>
</ol>
<p>文件打开方式：</p>
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p>**例如：**用二进制方式写文件 <code>ios::binary | ios:: out</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;fstream&gt;

void test01()
{
	ofstream ofs;
	ofs.open(&quot;test.txt&quot;, ios::out);

	ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;
	ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;
	ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;

	ofs.close();
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream  ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="512读文件">5.1.2读文件</h4>
<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol>
<li>
<p>包含头文件</p>
<p>#include &lt;fstream&gt;</p>
</li>
<li>
<p>创建流对象</p>
<p>ifstream ifs;</p>
</li>
<li>
<p>打开文件并判断文件是否打开成功</p>
<p>ifs.open(&quot;文件路径&quot;,打开方式);</p>
</li>
<li>
<p>读数据</p>
<p>四种方式读取</p>
</li>
<li>
<p>关闭文件</p>
<p>ifs.close();</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;fstream&gt;
#include &lt;string&gt;
void test01()
{
	ifstream ifs;
	ifs.open(&quot;test.txt&quot;, ios::in);

	if (!ifs.is_open())
	{
		cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;
		return;
	}

	//第一种方式
	//char buf[1024] = { 0 };
	//while (ifs &gt;&gt; buf)
	//{
	//	cout &lt;&lt; buf &lt;&lt; endl;
	//}

	//第二种
	//char buf[1024] = { 0 };
	//while (ifs.getline(buf,sizeof(buf)))
	//{
	//	cout &lt;&lt; buf &lt;&lt; endl;
	//}

	//第三种
	//string buf;
	//while (getline(ifs, buf))
	//{
	//	cout &lt;&lt; buf &lt;&lt; endl;
	//}

	char c;
	while ((c = ifs.get()) != EOF)
	{
		cout &lt;&lt; c;
	}

	ifs.close();


}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream  ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件</li>
</ul>
<h3 id="52-二进制文件">5.2 二进制文件</h3>
<p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 <mark>ios::binary</mark></p>
<h4 id="521-写文件">5.2.1 写文件</h4>
<p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include &lt;fstream&gt;
#include &lt;string&gt;

class Person
{
public:
	char m_Name[64];
	int m_Age;
};

//二进制文件  写文件
void test01()
{
	//1、包含头文件

	//2、创建输出流对象
	ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);
	
	//3、打开文件
	//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);

	Person p = {&quot;张三&quot;  , 18};

	//4、写文件
	ofs.write((const char *)&amp;p, sizeof(p));

	//5、关闭文件
	ofs.close();
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="522-读文件">5.2.2 读文件</h4>
<p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<pre><code class="language-C++">#include &lt;fstream&gt;
#include &lt;string&gt;

class Person
{
public:
	char m_Name[64];
	int m_Age;
};

void test01()
{
	ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);
	if (!ifs.is_open())
	{
		cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;
	}

	Person p;
	ifs.read((char *)&amp;p, sizeof(p));

	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;
}

int main() {

	test01();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费搭建属于自己的博客网站]]></title>
        <id>https://tangyin1.github.io/post/mian-fei-da-jian-shu-yu-zi-ji-de-bo-ke-wang-zhan/</id>
        <link href="https://tangyin1.github.io/post/mian-fei-da-jian-shu-yu-zi-ji-de-bo-ke-wang-zhan/">
        </link>
        <updated>2023-08-16T05:40:16.000Z</updated>
        <summary type="html"><![CDATA[<p>我也是最近才搭建起来属于自己的网站的，现在把这个方法记录分享下来。<br>
🍓🍓🍓本人小白，描述不清请勿怪🍓🍓🍓<br>
🍅🍅🍅Gridea+github+GithubDesktop🍅🍅🍅</p>
]]></summary>
        <content type="html"><![CDATA[<p>我也是最近才搭建起来属于自己的网站的，现在把这个方法记录分享下来。<br>
🍓🍓🍓本人小白，描述不清请勿怪🍓🍓🍓<br>
🍅🍅🍅Gridea+github+GithubDesktop🍅🍅🍅</p>
<!-- more -->
<h1 id="一-首先需要准备的工作如下">一、首先需要准备的工作如下：</h1>
<ol>
<li>注册好github账号，或者gitee账号<br>
<a href="www.github.com">github网站</a>   www.github.com<br>
<a href="www.gitee.com">gitee网站</a>  www.gitee.com<br>
（由于gitee需要实名认证，一个开源网站实名真的是，非必需真的不推荐）</li>
<li>安装好Gridea跟Git（最新版本的Gridea貌似不需要安装Git也能使用）<br>
<a href="https://gridea.dev">Gridea官网</a>  <a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">git官网</a></li>
<li>在GitHub上创建好一个专门放博客内容的仓库。注册是仓库名建议使用你github上实际的用户名+github.io<br>
列如我的是tangyin1.github.io<br>
<img src="https://tangyin1.github.io/post-images/1692189488871.png" alt="" loading="lazy"></li>
</ol>
<h1 id="二-随后需要申请token">二、随后需要申请token</h1>
<p>点击github上右上角头像---&gt;settings---&gt;划到最底下找到developer settings---&gt;点击personnal access tokens---&gt;tokens(classic)---&gt;Generate new token---输入账号密码---&gt;按照步骤来并且保存好你的token（<strong>且不要告诉别人</strong>）</p>
<h1 id="三-其次在gridea中进行配置">三、其次在Gridea中进行配置</h1>
<ul>
<li>域名：Github Pages 对应的域名（例如：https://tangyin1.github.io ）</li>
<li>仓库：你的静态文件存放的仓库（例如：tangyin1.github.io ）</li>
<li>分支：你的 Github Pages 对应的分支（这里默认是：master ）</li>
<li>用户名：仓库所属用户的用户名（通常就是你的 Github 账号的昵称，例如：tangyin1）</li>
<li>邮箱：Git 推送时使用的邮箱（通常就是你的 Github 账号的邮箱，例如：1234457678@qq.com）</li>
<li>Token: Git 推送时需要的 Token，用来向 Github 提交构建后的文件 这里的 token 就是 刚刚申请的 Github personal access tokens</li>
<li>CNAME: 可通过这个【可选项】配置你自己的域名（例如：suremotoo.site）</li>
<li>填写上面的信息后，点击 「检测远程连接」 按钮，如果提示 「远程连接成功」 那就 ok 啦～</li>
</ul>
<h1 id="四-测试连接">四、测试连接</h1>
<p>不过由于Gridea软件的特性，测试连接时可能会出现问题，这里建议使用科学上网的方式增加测试链接的成功性。</p>
<p>Gridea默认会出现预览功能，会在本地端口渲染好网页内容，但是这时候只有你自己可以访问，别人访问不了，点击同步按钮（由于软件特性和github网站服务器在外国，同步不成功很正常即便可以正常访问外网）</p>
<h2 id="相关解决办法">相关解决办法：</h2>
<p>我这里使用的GithubDesktop解决<br>
<a href="https://desktop.github.com/">GithubDesktop下载地址</a><br>
首先找到gridea的根目录下的output文件夹，删除里面所有内容<br>
然后进入GithubDesktop，登录好以后进入浏览器登录，找到刚刚建立的仓库，点击Clone---&gt;Open<br>
GithubDesktop---&gt;这时候浏览器会提示点击确认---&gt;打开GithubDesktop选择克隆仓库的存放路径---&gt;选择刚刚删除的output下<br>
<img src="https://tangyin1.github.io/post-images/1692190587003.png" alt="" loading="lazy"><br>
随后再次点击Gridea中的同步按钮，不论是否成功，打开GithubDesktop随便填写commit内容然后推上去（这步也需要科学上网），推送成功以后就，打开浏览器输入网址就能看到属于你的博客网站了。<br>
也有其他办法可以解决，修改根文件内容等，当然也可以使用其他的搭建方法，比如<strong>hexo</strong></p>
<h1 id="五-如何写博客">五、如何写博客</h1>
<p>进入Gridea主页面，点击右上角的+号，支持makedown语法，在写作页面有一些功能按钮，上传图片，更改封面，添加表情，预览等。<br>
关于科学上网……要是这个不会的话，那么建议您放弃本篇文章的方法，选择购买国内服务器+宝塔之类的办法搭建属于您的个人网站。可以选择腾讯云，阿里云、京东等，安全，快速，有效，唯一的缺点可能只是花了点小钱。不过学生可以进行认证，能稍微便宜点，亦或者白嫖几个月以后就算了。<br>
Gridea有创建评论的功能，虽然我们的域名是放在国外的，但由于国家方面考虑，不建议开启该功能，当有些不良言论的时候会影响到博客网站创始人。建议使用邮箱进行联系，或者在仓库下面进行评论。<br>
最后希望能够帮助到您顺利搭建好属于您自己的博客网站。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单元测试的一些基础知识]]></title>
        <id>https://tangyin1.github.io/post/dan-yuan-ce-shi-de-yi-xie-ji-chu-zhi-shi/</id>
        <link href="https://tangyin1.github.io/post/dan-yuan-ce-shi-de-yi-xie-ji-chu-zhi-shi/">
        </link>
        <updated>2023-08-14T13:08:11.000Z</updated>
        <summary type="html"><![CDATA[<p>🐶🐶关于单元测试的小知识<br>
🐱🐱本人菜鸡，说错勿怪</p>
]]></summary>
        <content type="html"><![CDATA[<p>🐶🐶关于单元测试的小知识<br>
🐱🐱本人菜鸡，说错勿怪</p>
<!-- more -->
<h1 id="一-什么是单元测试">一、什么是单元测试</h1>
<p>单元测试是为了保证代码在基本功能正确，因为代码经常会修改，每次修改完之后如果手动测试太花费时间，单元测试写好之后可以随时跑。</p>
<p>单元测试类似于网页设计时的代码校验，一般用白盒测试进去检测，当然也分静态和动态测试之分，单元测试主要是检测这部分代码ok不，不行就记录下来修改，这个校验过程叫回归测试，通过了单元测试，就到下一环节。<br>
集成测试，集测相当于组装测试，把网站开发小组各自通过的模块（单元测试）组装在一起集成一个面，多个集成测试就串起一个系统，进行系统测试，最后到验收测试，大体上测试分开  单元-集成-系统-验收，四大测试流程</p>
<p>不同的单元测试框架有不同的使用方法，一般来说会输出测试报告，告诉你哪些测试用例成功了，哪些测试用例失败了。</p>
<h1 id="二-单元测试案例gtest">二、单元测试案例（gtest）</h1>
<p>在vs2019中，内置gtest测试功能，选择创建新项目---&gt;点击搜索---&gt;本机单元测试---&gt;找到gtest<br>
下面是根据一个计算器的基础功能加减乘除的作为例子讲解<br>
<img src="https://tangyin1.github.io/post-images/1692019404735.png" alt="" loading="lazy"><br>
在一个单元测试中，有下面三个部分组成<br>
<img src="https://tangyin1.github.io/post-images/1692019631421.png" alt="" loading="lazy"></p>
<h2 id="1">1.</h2>
<p>在pch.cpp中放需要测试的函数<br>
需要在头部包含<strong>pch.h</strong>头文件</p>
<pre><code class="language-C++">//
// pch.cpp
//

#include &quot;pch.h&quot;
double calculate(const std::string&amp; expression, int&amp; index) {
  int length = expression.length();

  // 当前操作数
  double operand1 = 0.0;

  // 处理第一个操作数
  while (index &lt; length &amp;&amp; (isdigit(expression[index]) || expression[index] == '.')) {
      operand1 = operand1 * 10.0 + (expression[index] - '0');
      index++;
  }

  // 如果已经到达表达式结尾，直接返回第一个操作数
  if (index == length) {
      return operand1;
  }

  char operation = expression[index];

  // 跳过运算符
  index++;

  // 递归计算后续的表达式
  double operand2 = calculate(expression, index);

  // 根据运算符进行计算并返回结果
  switch (operation) {
  case '+':
      return operand1 + operand2;
  case '-':
      return operand1 - operand2;
  case '*':
      return operand1 * operand2;
  case '/':
      if (operand2 != 0.0) {
          return operand1 / operand2;
      }
      else {
          std::cerr &lt;&lt; &quot;Error: 除数不能为零&quot; &lt;&lt; std::endl;
          return 0.0;
      }
  default:
      std::cerr &lt;&lt; &quot;Error: 无法识别，请正确输入&quot; &lt;&lt; std::endl;
      return 0.0;
  }
}

double calculate(const std::string&amp; expression) {
  int index = 0;
  return calculate(expression, index);
}
</code></pre>
<h2 id="2">2.</h2>
<p>在pch.h中<br>
<img src="https://tangyin1.github.io/post-images/1692020040154.png" alt="" loading="lazy"></p>
<h2 id="3">3.</h2>
<p>在test.cpp中写测试数据代码</p>
<pre><code class="language-C++">#include &quot;pch.h&quot;

#include &quot;pch.h&quot;
#include &lt;gtest/gtest.h&gt;

TEST(CalculatorTest, Addition) {
    double result = calculate(&quot;1+2*3&quot;);//测试案例
    EXPECT_EQ(result, 7);//测试预期正确结果
}

TEST(CalculatorTest, Subtraction) {
    double result = calculate(&quot;5-2&quot;);
    EXPECT_EQ(result, 3);
}

TEST(CalculatorTest, Multiplication) {
    double result = calculate(&quot;2*4&quot;);
    EXPECT_EQ(result, 8);
}

TEST(CalculatorTest, Division) {
    double result = calculate(&quot;10/2&quot;);
    EXPECT_EQ(result, 5);
}

TEST(CalculatorTest, DivisionByZero) {
    double result = calculate(&quot;5/0&quot;);
    EXPECT_TRUE(std::isinf(result));
}
</code></pre>
<h2 id="4">4.</h2>
<p>最后点击运行，如果是在整个项目中添加到额单元测试，想要运行测试代码则右键---&gt;设为启动项即可<br>
测试结果如下：<br>
<img src="https://tangyin1.github.io/post-images/1692020497921.png" alt="" loading="lazy"></p>
<h1 id="三-测试的需求">三、测试的需求</h1>
<p>基础的测试工作，在实际开发中大多数的岗位是开发岗位，但技术含量相对较低，由于分为白盒测试跟黑盒测试，写开发代码的才是大佬，基础的说白了也就是配置好环境以后点点点，高端的测试岗位一般都在大厂，且很重要，中小型公司技术含量较低，一般都是新手进去了解整个项目开发流程的一个岗位。</p>
<p>测试有专门的岗位，单元测试是开发人员的职责。</p>
<p>专门测试主要做集成测试和功能测试，有专门的工具和方案</p>
<p>基础的测试岗位说白了就是点点点，发现哪里功能和设计不一致就提bug给开发修复。</p>
<p>测试开发岗位本质就是开发，开发测试相关的工具，以及写相关的集成代码。这种岗位国内很少，基本上只有头部的大厂会有，规模不大。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gdb安装与一些基本指令]]></title>
        <id>https://tangyin1.github.io/post/gan-zhuang-yu-yi-xie-ji-ben-zhi-ling/</id>
        <link href="https://tangyin1.github.io/post/gan-zhuang-yu-yi-xie-ji-ben-zhi-ling/">
        </link>
        <updated>2023-08-13T15:25:49.000Z</updated>
        <summary type="html"><![CDATA[<p>❤️❤️❤️新人小白请多指教❤️❤️❤️<br>
💡💡💡在linux下安装gdb跟cmake，以及一些基础知识💡💡💡</p>
]]></summary>
        <content type="html"><![CDATA[<p>❤️❤️❤️新人小白请多指教❤️❤️❤️<br>
💡💡💡在linux下安装gdb跟cmake，以及一些基础知识💡💡💡</p>
<!-- more -->
<h1 id="1安装gdb">1安装gdb</h1>
<p>安装gdb（包含了gcc：c语言 g++：c++）<br>
<code>sudo apt install build-essential gdb</code><br>
在安装任何软件之前需要先输入：<br>
<code>sudo apt update</code><br>
检验：</p>
<pre><code>gcc --version
g++ --version
gdb --version
</code></pre>
<h1 id="2安装cmake">2安装cmake：</h1>
<p><code>sudo apt install cmake</code><br>
检验：<br>
<code>cmake –version</code></p>
<h1 id="3建第一个在linux下第一个程序">3建第一个在linux下第一个程序</h1>
<ol>
<li><code>vim text1.cpp</code>  #创建一个叫text1的.cpp文件</li>
<li>编写程序</li>
<li>生成可执行程序：<br>
<code>g++ text1.cpp -o text1</code>  #生成一个叫text1的c++可执行文件<br>
4.运行text1(在ls查看文件后，若文件为绿色则表示为可执直接运行的文件)<br>
<code>./text1</code></li>
</ol>
<h1 id="4on优化源代码">4<strong>O[n]优化源代码</strong></h1>
<ol>
<li>-O，-O1<br>
这两个命令的效果是一样的，目的都是在不影响编译速度的前提下，尽量采用一些优化算法降低代码大小和可执行代码的运行速度。并开启如下的优化选项：</li>
<li>-O3<br>
该选项除了执行-O2所有的优化选项之外，一般都是采取很多向量化算法，提高代码的并行执行程度，利用现代CPU中的流水线，Cache等</li>
<li>-Os<br>
这个优化标识和-O3有异曲同工之妙，当然两者的目标不一样，<br>
-O3的目标是宁愿增加目标代码的大小，也要拼命的提高运行速度，<br>
但是这个选项是在-O2的基础之上，尽量的降低目标代码的大小，这对于存储容量很小的设备来说非常重要。<br>
为了降低目标代码大小，会禁用下列优化选项，一般就是压缩内存中的对齐空白(alignment padding)</li>
<li>-Ofast<br>
该选项将不会严格遵循语言标准，除了启用所有的-O3优化选项之外，也会针对某些语言启用部分优化。如：-ffast-math ，对于Fortran语言，还会启用下列选项</li>
<li>-Og<br>
优化调试体验。 -Og应该是标准edit-compile-debug周期的优化级别选择，<br>
在保持快速编译和良好调试体验的同时，提供合理的优化级别。<br>
用于生成可调试代码，因为某些收集调试信息的编译器通道在以下位置被禁用 -O0。<br>
像-O0 -Og完全禁用了许多优化过程，因此控制它们的单个选项无效。除此以外-Og 使所有 -O1 优化标志，但那些可能会干扰调试的标志除外：</li>
</ol>
<h1 id="5-l和-l指定库文件路径">5 <strong>-l</strong>和 <strong>-L</strong>指定库文件路径</h1>
<p>-l参数(小写)就是用来指定程序要链接的库，-l参数紧接着就是库名<br>
在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接<br>
链接glog库<br>
<code>g++ -lglog test.cpp</code><br>
如果库文件没放在上面三个目录里，需要使用-L参数(大写)指定库文件所在目录#  -L参数跟着的是库文件所在的目录名<br>
链接mytest库，libmytest.so在*/home/bing/mytestlibfolder*目录下g++ -L/home/bing/<code>mytestlibfolder -lmytest test.cpp</code></p>
<h1 id="6-i-指定头文件搜索目录">6 -I 指定头文件搜索目录</h1>
<p>/usr/include目录一般是不用指定的，gcc知道去那里找，但 是如果头文件不在/usr/icnclude里我们就要用-I参数指定了，比如头文件放在/myinclude目录里，那编译命令行就要加上- I/myinclude 参数了，如果不加你会得到一个”xxxx.h: No such file or directory”的错<br>
误。-I参数可以用相对路径，比如头文件在当前 目录，可以用-I.来指定。上面我们提到的–cflags参数就是用来生成-I参数的。</p>
<p><code>g++ -I/myinclude test.cpp</code></p>
<h1 id="7-wall打印警告信息">7-Wall打印警告信息</h1>
<p><code>g++ -Wall text,cpp</code></p>
<h1 id="8-stdc-设置编译标准">8-std=c++ 设置编译标准</h1>
<p><code>g++ -std=c++11 text.cpp</code></p>
<h1 id="9-o-指定输出文件名">9 -o 指定输出文件名</h1>
<p><code>g++ text,cpp -o text</code></p>
<h1 id="10-d-定义宏">10-D   定义宏</h1>
<p>在使用gcc/g++编译的时候定义宏<br>
常用场景：<br>
-DDEBUG  定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG<br>
示例代码：<br>
//  -Dname  定义宏name,默认定义内容为字符串“1”</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
 {
#ifdef DEBUG
printf(&quot;DEBUG LOG\n&quot;); #endif
printf(&quot;in\n&quot;); 
}

//  1.  在编译的时候，使用gcc  -DDEBUG  main.cpp
// 2. 第五行代码可以被执行
</code></pre>
<h1 id="11-git工作流程图">11 Git工作流程图</h1>
<p><img src="https://tangyin1.github.io/post-images/1691940756890.png" alt="" loading="lazy"><br>
https://learngitbranching.js.org/?locale=zh_CN</p>
<h1 id="12-程序编译过程">12 程序编译过程</h1>
<figure data-type="image" tabindex="1"><img src="https://tangyin1.github.io/post-images/1691940820451.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux基础指令]]></title>
        <id>https://tangyin1.github.io/post/linux-ji-chu-zhi-ling/</id>
        <link href="https://tangyin1.github.io/post/linux-ji-chu-zhi-ling/">
        </link>
        <updated>2023-08-13T13:59:42.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  这是一篇简单的<strong>linux</strong>基本指令 ！<br>
✍️ 新人小白请多指教</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  这是一篇简单的<strong>linux</strong>基本指令 ！<br>
✍️ 新人小白请多指教</p>
<!-- more -->
<h2 id="常见文件夹意义"><strong>常见文件夹意义</strong>：</h2>
<p><strong>Bin</strong>：全称binary，含义是二进制。该目录中存储的都是一些二进制文件，文件都是可以被运行的。<br>
<strong>Dev</strong>：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似window下的分配盘符）。<br>
<strong>Etc</strong>：该目录主要存储一些配置文件。<br>
<strong>Home</strong>：表示“家”，表示除了root用户以外其他用户的家目录，类似于windows下的User/用户目录。<br>
<strong>Proc</strong>：全称process，表示进程，该目录中存储的是Linux运行时候的进程。<br>
<strong>Root</strong>：该目录是root用户自己的家目录。<br>
<strong>Sbin</strong>：全称super binary，该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行。<br>
<strong>Tmp</strong>：表示“临时”的，当系统运行时候产生的临时文件会在这个目录存着。<br>
<strong>Usr</strong>：存放的是用户自己安装的软件。类似于windows下的program files。<br>
<strong>Var</strong>：存放的程序/系统的日志文件的目录。<br>
<strong>Mnt</strong>：当外接设备需要挂载的时候，就需要挂载到mnt目录下<br>
<strong>Boot</strong>：系统开机启动的文件<br>
命令格式：【命令】空格【选项】空格【操作对象】<br>
Eg:<code>ls -lah /home</code></p>
<h3 id="重要指令"><strong>重要指令</strong>*</h3>
<h2 id="1pwd">1：pwd</h2>
<p><code>pwd （print current working directory）</code><br>
打印当前终端所在的目录</p>
<h2 id="2ls">2：ls</h2>
<p><code>ls（list directory contents）</code><br>
列出当前工作目录下的所有文件/文件夹的名称<br>
用法：<br>
ls ./ #表示当前目录下<br>
ls.// #表示上一级目录下<br>
ls -lah /home<br>
解释：</p>
<ol>
<li>-l：表示list 表示以详细的列表的形式进行展示</li>
<li>-a：all，表示显示所有的文件夹/文件（包含了隐藏文件）</li>
<li>-h：表示以可读性较高的形式显示</li>
</ol>
<p>当显示出文件以“d”开头则为文件夹<br>
当显示出文件以“-”开头则说明为文件<br>
当显示出文件以“.”开头则说明是隐藏文件</p>
<h2 id="3-ctrll-清屏">3 ctrl+l  (清屏）</h2>
<h2 id="4-cd">4 cd</h2>
<p><code>cd（change directory）</code>切换到当前的工作目录<br>
用法1；cd  cd~    #直接进入当前的home目录下【很常用】</p>
<p>用法2：cd【相对路径】<br>
#进入到上级目录下<br>
<code>cd ..</code><br>
#进入到上级目录中的local目录下<br>
<code>cd ../local</code></p>
<p>PS:当输入cd /etc 后输入tab键</p>
<p>然后输入y确定之后</p>
<p>在键盘上输入open（不会有显示）</p>
<h2 id="5-midir">5 midir</h2>
<p><code>midir：make directories</code>创建目录<br>
用法1：mkdir a#在当前路径下创建了一个a的文件夹（目录）<br>
用法2：mkdir -p a/b/c #在当前路径下先创建了一个a然后在a下面创建b 然后在b下面创建了c<br>
用法3：直接创建多个目录<br>
<code>mkdir a b c</code></p>
<h2 id="6-touch">6 touch</h2>
<p><code>touch change file timestamps</code><br>
作用：创建新文件<br>
touch是创建文件 mkdir是创建文件夹</p>
<h4 id="1">1.</h4>
<p>touch的作用本来不是创建文件，而是将指定文件的修改时间设置为当前时间。就是假<br>
装“碰”（touch）了一下这个文件，假装文件被“修改”了，于是文件的修改时间就是被设置为当前时间。</p>
<h4 id="2">2.</h4>
<p>这带来了一个副作用，就是当touch一个不存在的文件的时候，它会创建这个文件。然后，由于touch已经可以完成创建文件的功能了，就不再需要一个单独的create了。</p>
<p>用法1：<br>
<code>touch linux.txt</code> 直接在当前目录下创建了一个linux的txt文件<br>
<code>touch home/tangyin/myfile</code>  在home/tangyin下面创建了一个myfile文件<br>
用法2：<br>
<code>touch file file.txt</code>  在当前目录下创建了file 跟file.txt两个文件</p>
<h2 id="7-rm">7 rm</h2>
<p><code>rm （remove files or directories）</code><br>
删除文件</p>
<ol>
<li>删除文件<br>
直接删除<br>
<code>rm myfile</code><br>
<code>rm /user/myfile</code></li>
<li>移除目录<br>
<code>rm -rf myfolder</code> 删除当前路径下的abc文件<br>
<code>rm -rf /usr/myfolder</code>  删除/usr路径下的abc文件</li>
</ol>
<h2 id="8-cp">8 cp</h2>
<p>cp：复制文件到指定位置<br>
用法1：<br>
cp [被复制的文件路径] [文件被复制到的路径]<br>
用法二：<br>
cp -r [被复制的文件夹路径] [文件夹被复制到的路径]</p>
<p>文件夹要加上-r  直接复制文件则直接</p>
<h2 id="9-mv">9 mv</h2>
<p>mv（move）移动文件或者重命名    ----剪切<br>
当文件在同一个文件夹下，没有移动到别处时，重命名</p>
<h2 id="10-man">10 man</h2>
<p>当没有手册，列如：<code>man cd</code></p>
<p>这时候应该输入 help cd<br>
<img src="https://tangyin1.github.io/post-images/1691938848365.png" alt="" loading="lazy"></p>
<h2 id="11-chomd">11 chomd</h2>
<p>可以修改文件的权限<br>
文件的基本权限包括：</p>
<ul>
<li>r (只读)</li>
<li>w (写入)</li>
<li>x(执行)<br>
chmod和标志+x，然后键入要修改其权限的文件</li>
</ul>
<h2 id="12-exit">12 exit</h2>
<p>退出命令，可在进入root后想回到普通用户模式直接使用exit</p>
<h2 id="13-shutdown">13 shutdown</h2>
<p>关机指令，可以指定时间关机，或者多少时间后关机<br>
shutdown now ：立即关机</p>
<h2 id="14-htop">14 htop</h2>
<p>htop是一种交互式流程查看器，可让您直接从终端管理计算机的资源。在大多数情况下，默认情况下它并没有安装，所以请确保在下载页面上阅读更多关于它的信息。<br>
<img src="https://tangyin1.github.io/post-images/1695223295065.png" alt="" loading="lazy"></p>
<h2 id="15-echo">15 echo</h2>
<p>在终端中直接显示文件内容</p>
<h2 id="16-cat">16 cat</h2>
<p>cat 是“concatenate”的缩写，用于直接从终端创建、查看和连接文件。它主要用于在不打开图形文本编辑器的情况下预览文件</p>
<h2 id="17-kill">17 kill</h2>
<p>杀死进程<br>
当一个程序没有响应，并且你不能用任何方法关闭它时，这是很烦人的。幸运的是，kill命令解决了这类问题。<br>
简单地说，kill向终止它的进程发送一个TERM或kill信号</p>
<h2 id="18-ping">18 ping</h2>
<p>ping 是用于测试网络连接的最流行的网络终端工具。ping 有很多选项，但在大多数情况下，您将使用它来请求域或IP地址</p>
<h2 id="19-vim">19 vim</h2>
<p>vim 是一个免费的开源终端文本编辑器，从90年代开始使用。它允许您使用高效的键绑定编辑纯文本文件。<br>
有些人认为使用困难——退出VIM是最常见的StackOverflow问题之一，但一旦习惯了，它就成为命令行中最好的盟友。<br>
要启动Vim，只需键入：<br>
<code>vim</code></p>
<h2 id="20-history">20 history</h2>
<p>如果你正在努力记住一个命令，history就会派上用场。此命令显示一个枚举列表，其中包含您过去使用过的命令</p>
<h2 id="21-which">21 which</h2>
<p>which命令输出shell命令的完整路径。如果它不能识别给定的命令，它将抛出一个错误</p>
<p>##22 shred<br>
如果您希望文件几乎无法恢复，shred 可以帮助您完成此任务。此命令会重复覆盖文件的内容，因此，给定的文件极难恢复。<br>
如果要立即删除文件，可以使用-u标志：</p>
<p><code>shred -u file_to_shred.txt</code></p>
<p>##23 head<br>
这是对tail命令的补充。head输出文本文件的前10行，但您可以使用-n标志设置要显示的任意行数：</p>
<pre><code>head long.txt
head -n 5 long.txt
</code></pre>
<p>##24 find<br>
find命令根据regex表达式在目录层次结构中搜索文件。</p>
<p>rebot:重启<br>
sudo -i:进入root权限</p>
<h2 id="25-ln">25 ln</h2>
<p>直接链接文件，<br>
hard link：权限比较少，但安全且不消耗内存，删除连接后不会对文件进行删除<br>
另一种连接类似Windows下的创建快捷方式， 需要【ln -s 文件名】删除之后不能正常打开文件，且创建连接会消耗一部分存储空间</p>
<p>拓展：<br>
关于tree<br>
安装tree命令之前需要安装make命令</p>
<ol>
<li>安装make命令：<br>
首先在终端更新所有软件：sudo apt-get update<br>
然后输入：sudo apt install make<br>
最后等待安装，若出现需要确认的选项选择确认</li>
<li>安装tree：<br>
首先下载 输入：<br>
<code>wget http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz</code></li>
</ol>
<p>然后解压：<code>tar zxvf tree-1.7.0.tgz</code><br>
进入目录：<code>cd tree -1.7.0</code><br>
使用sudo -i切换到root       （这次修改的密码时12345678）<br>
然后 <code>cp tree /bin</code><br>
完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://tangyin1.github.io/post/hello-gridea/</id>
        <link href="https://tangyin1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>